(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    286394,       5871]
NotebookOptionsPosition[    283674,       5777]
NotebookOutlinePosition[    284057,       5794]
CellTagsIndexPosition[    284014,       5791]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Visualizations of qubit driving beyond the RWA", \
"Title"]], "Text",
 CellChangeTimes->{{3.720415856469101*^9, 3.720415908146785*^9}}],

Cell[CellGroupData[{

Cell["Original Hamiltonian & Magnus effective Hamiltonians", "Section",
 CellChangeTimes->{{3.721110029398683*^9, 3.721110049653016*^9}}],

Cell["\<\

Define original Hamiltonian in the rotating frame\
\>", "Text",
 CellChangeTimes->{{3.7196436607136917`*^9, 3.7196436919140244`*^9}, 
   3.719657744467873*^9, {3.720244319005018*^9, 3.7202443210489607`*^9}, 
   3.720415852398018*^9}],

Cell[BoxData[
 RowBox[{"Horig", ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"H1", "/", "4"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", "phi", "]"}], "*", "sx"}], "+", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"2", "*", "ww", "*", "t"}], "+", "phi"}], "]"}], "sx"}], "+", 
      RowBox[{
       RowBox[{"Sin", "[", "phi", "]"}], "sy"}], "-", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"2", "*", "ww", "*", "t"}], "+", "phi"}], "]"}], "*", 
       "sy"}]}], ")"}]}], "+", 
   RowBox[{
    RowBox[{"Delta", "/", "2"}], "*", "sz"}]}]}]], "Input",
 CellChangeTimes->{{3.719643473500388*^9, 3.7196436036867323`*^9}, {
   3.719643650553937*^9, 3.7196436528412933`*^9}, {3.720244552513276*^9, 
   3.720244588137054*^9}, {3.720244629147169*^9, 3.720244667635796*^9}, 
   3.7203341327742767`*^9}],

Cell["Define Magnus approximation Hamiltonians", "Text",
 CellChangeTimes->{{3.71964340444093*^9, 3.719643433346612*^9}, {
  3.720245446605926*^9, 3.72024544741252*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gtermHww0", "=", 
   RowBox[{
    FractionBox["1", "4"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "Delta", " ", "sz"}], "+", 
      RowBox[{"H1", " ", "sx", " ", 
       RowBox[{"Cos", "[", "phi", "]"}]}], "+", 
      RowBox[{"H1", " ", "sy", " ", 
       RowBox[{"Sin", "[", "phi", "]"}]}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gtermHwwM1", "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"32", " ", "ww"}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["H1", "2"], " ", "sz"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "2"], " ", "sz", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"phi", "+", "\[Alpha]0"}], ")"}]}], "]"}]}], "+", 
      RowBox[{"4", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Delta", " ", "H1", " ", "sx"}], "+", 
         RowBox[{"H1D", " ", "sy"}]}], ")"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{"4", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"H1D", " ", "sx"}], "-", 
         RowBox[{"Delta", " ", "H1", " ", "sy"}]}], ")"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gtermHwwM2", "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"256", " ", 
      SuperscriptBox["ww", "2"]}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "8"}], " ", "Delta", " ", 
       SuperscriptBox["H1", "2"], " ", "sz"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "3"], " ", "sx", " ", 
       RowBox[{"Cos", "[", "phi", "]"}]}], "+", 
      RowBox[{"8", " ", "Delta", " ", 
       SuperscriptBox["H1", "2"], " ", "sz", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"phi", "+", "\[Alpha]0"}], ")"}]}], "]"}]}], "-", 
      RowBox[{"16", " ", 
       SuperscriptBox["Delta", "2"], " ", "H1", " ", "sx", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{"16", " ", "H1DD", " ", "sx", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "-", 
      RowBox[{"32", " ", "Delta", " ", "H1D", " ", "sy", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "3"], " ", "sx", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"3", " ", "phi"}], "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "-", 
      RowBox[{
       SuperscriptBox["H1", "3"], " ", "sx", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"3", " ", "phi"}], "+", 
         RowBox[{"4", " ", "\[Alpha]0"}]}], "]"}]}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "3"], " ", "sy", " ", 
       RowBox[{"Sin", "[", "phi", "]"}]}], "+", 
      RowBox[{"24", " ", "H1", " ", "H1D", " ", "sz", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"phi", "+", "\[Alpha]0"}], ")"}]}], "]"}]}], "-", 
      RowBox[{"32", " ", "Delta", " ", "H1D", " ", "sx", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{"16", " ", 
       SuperscriptBox["Delta", "2"], " ", "H1", " ", "sy", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "-", 
      RowBox[{"16", " ", "H1DD", " ", "sy", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"phi", "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "3"], " ", "sy", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"3", " ", "phi"}], "+", 
         RowBox[{"2", " ", "\[Alpha]0"}]}], "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["H1", "3"], " ", "sy", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"3", " ", "phi"}], "+", 
         RowBox[{"4", " ", "\[Alpha]0"}]}], "]"}]}]}], ")"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.719643381072638*^9, 3.719643396752432*^9}, {
  3.7196434965181017`*^9, 3.7196434980195923`*^9}, {3.7202442779699717`*^9, 
  3.720244309855783*^9}, {3.720245964623187*^9, 3.720246063536854*^9}, {
  3.7202461644283943`*^9, 3.720246231240554*^9}, {3.720248708864814*^9, 
  3.7202487111749573`*^9}, {3.720268371550209*^9, 3.720268372408391*^9}, {
  3.721630558881887*^9, 3.7216305612585297`*^9}, {3.721630600180681*^9, 
  3.721630619508255*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"termHww0", "=", 
  RowBox[{"gtermHww0", "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Delta", "\[Rule]", "0"}], ",", 
     RowBox[{"phi", "\[Rule]", "0"}]}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"termHwwM1", "=", 
  RowBox[{
   RowBox[{"gtermHwwM1", "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Delta", "\[Rule]", "0"}], ",", 
      RowBox[{"phi", "\[Rule]", "0"}]}], "}"}]}], "//", 
   "FullSimplify"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uglyHeff", "=", 
   RowBox[{
    RowBox[{
     FractionBox["1", "4"], " ", "sx", " ", "H1"}], "+", 
    FractionBox[
     RowBox[{
      RowBox[{"H1D", " ", "\[Pi]", " ", "sx"}], "+", 
      RowBox[{"H1D", " ", "sy", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}], "+", 
      RowBox[{"H1D", " ", "sx", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "\[Alpha]0"}], "]"}]}]}], 
     RowBox[{"8", " ", "ww"}]]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"termHwwM2", "=", 
   RowBox[{
    RowBox[{"gtermHwwM2", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Delta", "\[Rule]", "0"}], ",", 
       RowBox[{"phi", "\[Rule]", "0"}]}], "}"}]}], "//", "FullSimplify"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ApproxHList", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Accumulate", "[", 
     RowBox[{"{", 
      RowBox[{"termHww0", ",", "termHwwM1"}], "}"}], "]"}], ",", 
    RowBox[{"{", "uglyHeff", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.721630576292171*^9, 3.7216306582925253`*^9}, {
  3.721630818347034*^9, 3.721630838874868*^9}, {3.721633033746441*^9, 
  3.721633046281035*^9}, {3.721633123332355*^9, 3.721633143495358*^9}, {
  3.721652597168684*^9, 3.7216527163450727`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"H1", " ", "sx"}], "4"]], "Output",
 CellChangeTimes->{3.721643914805642*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["H1", "2"], " ", "sz"}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"4", " ", "H1D", " ", "sy"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["H1", "2"], " ", "sz"}]}], ")"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}], "+", 
   RowBox[{"4", " ", "H1D", " ", "sx", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}]}], 
  RowBox[{"32", " ", "ww"}]]], "Output",
 CellChangeTimes->{3.721643915253039*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"-", "2"}], " ", 
    SuperscriptBox["H1", "3"], " ", "sx"}], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["H1", "3"], "+", 
      RowBox[{"8", " ", "H1DD"}]}], ")"}], " ", "sx", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}], "-", 
   RowBox[{
    SuperscriptBox["H1", "3"], " ", "sx", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"4", " ", "\[Alpha]0"}], "]"}]}], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["H1", "3"], " ", "sy"}], "-", 
      RowBox[{"8", " ", "H1DD", " ", "sy"}], "+", 
      RowBox[{"12", " ", "H1", " ", "H1D", " ", "sz"}]}], ")"}], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["H1", "3"], " ", "sy", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"4", " ", "\[Alpha]0"}], "]"}]}]}], 
  RowBox[{"256", " ", 
   SuperscriptBox["ww", "2"]}]]], "Output",
 CellChangeTimes->{3.7216439177546673`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"H1", " ", "sx"}], "4"], ",", 
   RowBox[{
    FractionBox[
     RowBox[{"H1", " ", "sx"}], "4"], "+", 
    FractionBox[
     RowBox[{
      RowBox[{
       SuperscriptBox["H1", "2"], " ", "sz"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"4", " ", "H1D", " ", "sy"}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["H1", "2"], " ", "sz"}]}], ")"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}], "+", 
      RowBox[{"4", " ", "H1D", " ", "sx", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Alpha]0"}], "]"}]}]}], 
     RowBox[{"32", " ", "ww"}]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.721643917758971*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Definition of the driving envelopes", "Section",
 CellChangeTimes->{{3.719753983824387*^9, 3.7197539861273727`*^9}, {
  3.7202683776598577`*^9, 3.720268378498946*^9}, {3.720349085146244*^9, 
  3.7203490888034067`*^9}, {3.720416056449759*^9, 3.720416062111112*^9}}],

Cell["\<\
All jump operators are defined from the real Hamiltonian to the effective \
Hamiltonian\
\>", "Text",
 CellChangeTimes->{{3.7210486335397673`*^9, 3.7210487094598923`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"id2", "=", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"ones2", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"constantH1p", "=", 
    RowBox[{"Function", "[", 
     RowBox[{"t", ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"constantJmp", "=", 
     RowBox[{"Accumulate", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"0", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", 
           RowBox[{"4", "ww"}]]}], " ", "\[ImaginaryI]", " ", "H1", " ", 
         RowBox[{"Sin", "[", "\[Alpha]0", "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sx", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"phi", "+", "\[Alpha]0"}], "]"}]}], "-", 
           RowBox[{"sy", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"phi", "+", "\[Alpha]0"}], "]"}]}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"+", 
          FractionBox["1", 
           RowBox[{"32", 
            SuperscriptBox["ww", "2"]}]]}], " ", "\[ImaginaryI]", " ", "H1", 
         " ", 
         RowBox[{"Sin", "[", "\[Alpha]0", "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"H1", " ", "sz", " ", 
            RowBox[{"Cos", "[", "\[Alpha]0", "]"}]}], "+", 
           RowBox[{"4", " ", "Delta", " ", "sx", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"phi", "+", "\[Alpha]0"}], "]"}]}], "-", 
           RowBox[{"2", " ", "H1", " ", "sz", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{
              RowBox[{"2", " ", "phi"}], "+", "\[Alpha]0"}], "]"}]}], "-", 
           RowBox[{"4", " ", "Delta", " ", "sy", " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"phi", "+", "\[Alpha]0"}], "]"}]}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"constantJmp", "=", 
    RowBox[{"Accumulate", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"0", ",", "\[IndentingNewLine]", 
       RowBox[{
        FractionBox["1", 
         RowBox[{"4", "ww"}]], " ", "\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"HA", "-", "HB"}], ")"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Alpha]0", "-", "\[Alpha]j"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"sx", " ", 
           RowBox[{"Cos", "[", 
            RowBox[{"phi", "+", "\[Alpha]0", "+", "\[Alpha]j"}], "]"}]}], "-", 
          RowBox[{"sy", " ", 
           RowBox[{"Sin", "[", 
            RowBox[{"phi", "+", "\[Alpha]0", "+", "\[Alpha]j"}], "]"}]}]}], 
         ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", 
          RowBox[{"32", 
           SuperscriptBox["ww", "2"]}]]}], " ", "\[ImaginaryI]", " ", 
        RowBox[{"(", 
         RowBox[{"HA", "-", "HB"}], ")"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Alpha]0", "-", "\[Alpha]j"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"HA", "+", "HB"}], ")"}], " ", "sz", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cos", "[", 
              RowBox[{"\[Alpha]0", "-", "\[Alpha]j"}], "]"}], "-", 
             RowBox[{"2", " ", 
              RowBox[{"Cos", "[", 
               RowBox[{
                RowBox[{"2", " ", "phi"}], "+", "\[Alpha]0", "+", 
                "\[Alpha]j"}], "]"}]}]}], ")"}]}], "+", 
          RowBox[{"4", " ", "Delta", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"sx", " ", 
              RowBox[{"Cos", "[", 
               RowBox[{"phi", "+", "\[Alpha]0", "+", "\[Alpha]j"}], "]"}]}], 
             "-", 
             RowBox[{"sy", " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"phi", "+", "\[Alpha]0", "+", "\[Alpha]j"}], "]"}]}]}],
             ")"}]}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"linearH1p", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"t", ",", 
     RowBox[{"2", "*", "t"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"linearJmp", "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1pOptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\"\<constant\>\""}], ",", 
     RowBox[{"2", "\[Rule]", "\"\<linear increase\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1pList", "=", 
   RowBox[{"{", 
    RowBox[{"constantH1p", ",", "linearH1p"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"jmpList", "=", 
    RowBox[{"{", 
     RowBox[{"constantJmp", ",", "linearJmp"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"H1profile", "=", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"t", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"HeavisideTheta", "[", "t", "]"}], "-", 
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"t", "-", "tr"}], "]"}]}], ")"}], "*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"1", "/", "2"}], "-", 
             RowBox[{
              RowBox[{"Cos", "[", 
               RowBox[{"Pi", "*", 
                RowBox[{"t", "/", "tr"}]}], "]"}], "/", "2"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", "tr"}], ")"}]}]}], "\[IndentingNewLine]", "+", 
         " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"t", "-", "tr"}], "]"}], "-", 
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"t", "-", "1", "+", "tr"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"1", "-", "tr"}], ")"}]}], ")"}]}], 
         "\[IndentingNewLine]", "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"t", "-", "1", "+", "tr"}], "]"}], "-", 
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"t", "-", "1"}], "]"}]}], ")"}], "*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"1", "/", "2"}], "-", 
             RowBox[{
              RowBox[{"Cos", "[", 
               RowBox[{"Pi", "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "-", "t"}], ")"}], "/", "tr"}]}], "]"}], "/", 
              "2"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", "tr"}], ")"}]}]}]}]}], "\[IndentingNewLine]", 
       "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{"tr", "\[Rule]", 
        RowBox[{"1", "/", "5"}]}], "}"}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"PopupMenu", "[", 
  RowBox[{
   RowBox[{"Dynamic", "[", "selprof", "]"}], ",", "H1pOptions"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"H1pList", "[", 
      RowBox[{"[", "selprof", "]"}], "]"}], "@", "t"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<t/t_max\>\"", ",", "\"\<H1/H1_avg\>\""}], "}"}]}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", "\"\<driving envelope H1(t)\>\""}]}], 
   "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.719813276104945*^9, 3.719813281352642*^9}, {
   3.720266739595523*^9, 3.72026680429106*^9}, {3.720266905183339*^9, 
   3.720266948230866*^9}, {3.720266981312031*^9, 3.7202670323321037`*^9}, {
   3.7202672274332438`*^9, 3.720267271592948*^9}, {3.72026741191917*^9, 
   3.720267453792047*^9}, {3.72026748825782*^9, 3.720267494673595*^9}, {
   3.720267547716856*^9, 3.720267592363762*^9}, {3.7202676239672947`*^9, 
   3.7202676798461857`*^9}, {3.720267721080347*^9, 3.720267721879774*^9}, {
   3.720267778205008*^9, 3.720267831172491*^9}, {3.720267861796727*^9, 
   3.720267877500526*^9}, {3.7202679107836437`*^9, 3.720267915478465*^9}, {
   3.720268076244336*^9, 3.720268190866675*^9}, {3.7202682248174877`*^9, 
   3.720268265328919*^9}, {3.720268301556294*^9, 3.7202683152184277`*^9}, {
   3.720268386543592*^9, 3.7202683871865396`*^9}, {3.720268639550334*^9, 
   3.720268721637198*^9}, {3.720331019478126*^9, 3.720331066261516*^9}, {
   3.720331196985037*^9, 3.720331201863633*^9}, {3.720333179408434*^9, 
   3.720333195835477*^9}, {3.720333499391531*^9, 3.7203335083590193`*^9}, {
   3.720333579743729*^9, 3.720333585223814*^9}, 3.720335455942601*^9, {
   3.720335545105612*^9, 3.72033555755285*^9}, 3.720355513649579*^9, {
   3.72035599041612*^9, 3.720356056575248*^9}, {3.720356088866191*^9, 
   3.7203564705029078`*^9}, {3.720356510495723*^9, 3.720356548256439*^9}, {
   3.720416517520042*^9, 3.720416517677897*^9}, {3.720416551520164*^9, 
   3.7204166948204193`*^9}, {3.72043353806583*^9, 3.720433555385394*^9}, {
   3.720438511996814*^9, 3.720438539773818*^9}, {3.720440701307568*^9, 
   3.720440714771039*^9}, {3.720502044311821*^9, 3.720502048941143*^9}, {
   3.720867840722589*^9, 3.720867850358924*^9}, {3.7208678940854187`*^9, 
   3.720867948418954*^9}, {3.720867980809053*^9, 3.7208679837721043`*^9}, {
   3.720868027730586*^9, 3.720868031525524*^9}, 3.7208682846405077`*^9, {
   3.720869871860929*^9, 3.7208698760412197`*^9}, 3.720870244286984*^9, {
   3.720958006863597*^9, 3.720958021225534*^9}, {3.7209589029969397`*^9, 
   3.7209589100928707`*^9}, {3.720959119094308*^9, 3.720959137306698*^9}, {
   3.721048456460091*^9, 3.721048491957863*^9}, {3.721048558010335*^9, 
   3.721048590953947*^9}, {3.7210487122930193`*^9, 3.721048721949877*^9}, 
   3.721053466540574*^9, {3.721053697368998*^9, 3.721053702986822*^9}, {
   3.7210537508197308`*^9, 3.721053755154134*^9}, {3.7211238108396463`*^9, 
   3.721123835186327*^9}, {3.721387646503743*^9, 3.721387658515223*^9}, {
   3.721387693950897*^9, 3.721387751614341*^9}, {3.721630940056131*^9, 
   3.7216309646410933`*^9}}],

Cell[BoxData[
 PopupMenuBox[Dynamic[$CellContext`selprof], {1->"\<\"constant\"\>", 
  2->"\<\"linear increase\"\>"}]], "Output",
 CellChangeTimes->{3.721643917994362*^9}],

Cell[BoxData[
 DynamicBox[ToBoxes[
   Plot[
    Part[$CellContext`H1pList, $CellContext`selprof][$CellContext`t], \
{$CellContext`t, 0, 1}, AxesLabel -> {"t/t_max", "H1/H1_avg"}, PlotLabel -> 
    "driving envelope H1(t)"], StandardForm],
  ImageSizeCache->{360., {112., 116.}}]], "Output",
 CellChangeTimes->{3.721643918001799*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Trajectory integration and coordinate transformations", "Section",
 CellChangeTimes->{{3.720416000990511*^9, 3.72041603102313*^9}, {
  3.720505805275112*^9, 3.720505808025489*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pms", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"si", "\[Rule]", 
      RowBox[{"PauliMatrix", "[", "0", "]"}]}], ",", 
     RowBox[{"sx", "\[Rule]", 
      RowBox[{"PauliMatrix", "[", "1", "]"}]}], ",", 
     RowBox[{"sy", "\[Rule]", 
      RowBox[{"PauliMatrix", "[", "2", "]"}]}], ",", 
     RowBox[{"sz", "\[Rule]", 
      RowBox[{"PauliMatrix", "[", "3", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1Dsubs", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"H1", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"H1", "[", "t", "]"}], ")"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"H1D", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"H1", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "1"}], "}"}]}], "]"}], ")"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"H1DD", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"H1", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "2"}], "}"}]}], "]"}], ")"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"H1DDD", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"H1", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "3"}], "}"}]}], "]"}], ")"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"H1DDDD", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"H1", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "4"}], "}"}]}], "]"}], ")"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AssembleH", "[", 
    RowBox[{"H_", ",", "H1f_", ",", "vals_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"H", "/.", "vals"}], "/.", "H1Dsubs"}], "/.", "pms"}], "/.", 
     RowBox[{"{", 
      RowBox[{"H1", "\[Rule]", "H1f"}], "}"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToHFunc", "[", "H_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", "\[Alpha]0"}], "}"}], ",", "func"}], "]"}], "/.", 
    RowBox[{"func", "\[Rule]", "H"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetHFunc", "[", 
    RowBox[{"H_", ",", "H1f_", ",", "vals_"}], "]"}], ":=", 
   RowBox[{"ToHFunc", "@", 
    RowBox[{"AssembleH", "[", 
     RowBox[{"H", ",", "H1f", ",", "vals"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.719643717851988*^9, 3.719643722578844*^9}, {
   3.7196445358476553`*^9, 3.719644645913954*^9}, 3.719644992270249*^9, {
   3.7196450874805927`*^9, 3.719645101937063*^9}, {3.719645166643141*^9, 
   3.719645174523979*^9}, {3.719646103414359*^9, 3.719646119832254*^9}, {
   3.719646168655179*^9, 3.7196461788069487`*^9}, {3.7196463846793957`*^9, 
   3.719646390557131*^9}, {3.719646450568348*^9, 3.719646468168521*^9}, {
   3.719646508600741*^9, 3.719646518312168*^9}, {3.7196465654593678`*^9, 
   3.719646574014278*^9}, {3.71964660406135*^9, 3.7196466172357883`*^9}, {
   3.7196467640886707`*^9, 3.719646784321706*^9}, {3.719651934490148*^9, 
   3.719651955486479*^9}, {3.7196520793437443`*^9, 3.719652080619643*^9}, {
   3.719652110886743*^9, 3.7196521323243837`*^9}, {3.719652912585964*^9, 
   3.7196529681193132`*^9}, {3.719653010339864*^9, 3.719653012248835*^9}, {
   3.719653562023431*^9, 3.71965359310808*^9}, 3.7197264696092863`*^9, {
   3.719726534188534*^9, 3.719726555250202*^9}, {3.7202444989299*^9, 
   3.720244499447023*^9}, {3.720245034401173*^9, 3.720245060520206*^9}, {
   3.720333881548126*^9, 3.720333916662674*^9}, {3.720334062056768*^9, 
   3.720334072368347*^9}, {3.72043352496012*^9, 3.72043353067106*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Numerically", " ", "compute", " ", "trajectory", " ", "from", " ", "any", 
    " ", "Hamiltonian"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"NTrajectory", "[", 
     RowBox[{"Hfunc_", ",", "tM_", ",", "\[Alpha]0_", ",", "\[Psi]0_", ",", 
      RowBox[{"tinit_:", "0"}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"First", "@", 
       RowBox[{"NDSolve", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"D", "[", 
                RowBox[{
                 RowBox[{"\[Psi]", "[", "t", "]"}], ",", "t"}], "]"}]}], 
              "\[Equal]", 
              RowBox[{
               RowBox[{"Hfunc", "[", 
                RowBox[{"t", ",", "\[Alpha]0"}], "]"}], ".", 
               RowBox[{"\[Psi]", "[", "t", "]"}]}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Indeterminate", "\[Rule]", "0"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"\[Psi]", "[", "tinit", "]"}], "==", "\[Psi]0"}]}], "}"}],
          ",", "\[Psi]", ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "tM"}], "}"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Helper", " ", "functions", " ", "for", " ", "plotting"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Coordinate", " ", "transforms"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"BlochCoordinatesFromState", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "state", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Re", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "*", 
            RowBox[{
             RowBox[{"state", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "\[Conjugate]"}]}], "+", 
           RowBox[{
            RowBox[{
             RowBox[{"state", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "\[Conjugate]"}], 
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"Im", "[", 
            RowBox[{
             RowBox[{"state", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "*", 
             RowBox[{
              RowBox[{"state", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "\[Conjugate]"}]}], "]"}]}], 
          "+", 
          RowBox[{"Im", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"state", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "\[Conjugate]"}], "*", 
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"state", "[", 
            RowBox[{"[", "1", "]"}], "]"}], 
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[Conjugate]"}]}], "-", 
          RowBox[{
           RowBox[{"state", "[", 
            RowBox[{"[", "2", "]"}], "]"}], 
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[Conjugate]"}]}]}]}], 
        "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RotationAxisFromHamiltonian", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "H", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Re", "[", 
          RowBox[{
           RowBox[{"Tr", "[", 
            RowBox[{"H", ".", 
             RowBox[{"PauliMatrix", "[", "i", "]"}]}], "]"}], "/", "2."}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Cartesian", " ", "Bloch", " ", "angles", " ", "transformations"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RestrictAngleMPiPPi", "=", 
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"x", "+", "Pi"}], ",", 
          RowBox[{"2", "Pi"}]}], "]"}], "-", "Pi"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"BlochAngleCoordinatesFromState", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "state", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RestrictAngleMPiPPi", "[", 
          RowBox[{
           RowBox[{"Arg", "[", 
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], "-", 
           RowBox[{"Arg", "[", 
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"2", "*", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"XBasisFromZBasis", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "state", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", 
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "/", 
          RowBox[{"Sqrt", "[", "2", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", 
            RowBox[{"state", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "/", 
          RowBox[{"Sqrt", "[", "2", "]"}]}]}], "\[IndentingNewLine]", "}"}]}],
       "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mercator", " ", "transformations"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MercatorCoordinatesFromBlochAngle", "=", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "coords", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"coords", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"-", 
          RowBox[{"ArcTanh", "[", 
           RowBox[{"Cos", "[", 
            RowBox[{"coords", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.7196456313106613`*^9, 3.7196457882836943`*^9}, {
   3.7196458716288233`*^9, 3.719645911340754*^9}, {3.719645962519986*^9, 
   3.71964596967822*^9}, {3.7196533116293583`*^9, 3.7196534768806133`*^9}, {
   3.7196535952050047`*^9, 3.719653636196929*^9}, {3.719653924912017*^9, 
   3.719653952078833*^9}, {3.719653982641733*^9, 3.7196541434211063`*^9}, {
   3.719654220012231*^9, 3.719654233648473*^9}, {3.719654305510405*^9, 
   3.719654370261098*^9}, 3.7196545885118237`*^9, {3.7196546591842413`*^9, 
   3.71965466040137*^9}, {3.719656570585896*^9, 3.719656791159357*^9}, {
   3.7196568442729473`*^9, 3.719656851205359*^9}, {3.7196572565643587`*^9, 
   3.719657313018717*^9}, {3.7196573615194473`*^9, 3.719657362838056*^9}, {
   3.7196574060430803`*^9, 3.7196574386561003`*^9}, {3.719657472676058*^9, 
   3.719657498442898*^9}, {3.719657636218652*^9, 3.719657670184771*^9}, {
   3.7196577017151403`*^9, 3.719657703617139*^9}, {3.71966221613478*^9, 
   3.7196622280306664`*^9}, {3.719662480763899*^9, 3.7196625063999977`*^9}, {
   3.7196625619171677`*^9, 3.7196626002209387`*^9}, {3.71966267955975*^9, 
   3.719662715988278*^9}, {3.719662812997129*^9, 3.719662842149823*^9}, {
   3.719663093430153*^9, 3.719663101156107*^9}, {3.719663195553578*^9, 
   3.719663265292507*^9}, {3.7196633599608927`*^9, 3.719663372540359*^9}, {
   3.719663412348423*^9, 3.719663458141337*^9}, {3.719665537183547*^9, 
   3.7196655719879723`*^9}, {3.7197254052652473`*^9, 3.719725494833666*^9}, {
   3.719725681914853*^9, 3.719725715616377*^9}, {3.719725799333725*^9, 
   3.719725818220581*^9}, {3.719725877273431*^9, 3.7197259613612823`*^9}, {
   3.719726025691444*^9, 3.719726213112496*^9}, {3.719726444128738*^9, 
   3.719726456529598*^9}, {3.719727596190259*^9, 3.719727629362872*^9}, {
   3.719727806211677*^9, 3.719727934266852*^9}, {3.719727974230893*^9, 
   3.719727977229498*^9}, {3.719728097049365*^9, 3.719728100049505*^9}, {
   3.719729072077509*^9, 3.7197292151938267`*^9}, {3.7197320213069*^9, 
   3.719732028076088*^9}, {3.719732088790575*^9, 3.719732094917544*^9}, {
   3.7197321867243977`*^9, 3.719732209033658*^9}, {3.719732289478074*^9, 
   3.719732406489702*^9}, {3.7197326085787983`*^9, 3.71973261842257*^9}, {
   3.719732689954171*^9, 3.7197327314741783`*^9}, {3.719733471072098*^9, 
   3.719733472058918*^9}, {3.719733522645763*^9, 3.719733553157633*^9}, {
   3.719733584774048*^9, 3.719733735083021*^9}, {3.719737395185192*^9, 
   3.719737399408736*^9}, {3.71981940856663*^9, 3.719819411138315*^9}, {
   3.719843314063737*^9, 3.719843413670208*^9}, {3.719843528252864*^9, 
   3.719843533598009*^9}, {3.719843620978965*^9, 3.71984362210338*^9}, {
   3.720243519084482*^9, 3.7202435229175987`*^9}, {3.7202451043841333`*^9, 
   3.720245415885253*^9}, {3.720246273548353*^9, 3.720246474447229*^9}, {
   3.720248674427906*^9, 3.7202486815214987`*^9}, {3.720331115904566*^9, 
   3.7203311681436863`*^9}, {3.72033351656979*^9, 3.720333520463787*^9}, {
   3.7203340842696123`*^9, 3.7203340971892853`*^9}, {3.720348987490931*^9, 
   3.720349010711841*^9}, {3.720349244836308*^9, 3.720349253979446*^9}, {
   3.720503107201013*^9, 3.720503180313891*^9}, {3.720503308390954*^9, 
   3.7205033420945883`*^9}, {3.720505394832678*^9, 3.720505399174391*^9}, {
   3.72050545297269*^9, 3.720505559165401*^9}, {3.720505600648261*^9, 
   3.720505610319808*^9}, {3.720505644865181*^9, 3.720505691536974*^9}, 
   3.720505792435629*^9, 3.720505834077351*^9, {3.721631882845504*^9, 
   3.7216318978203497`*^9}, {3.721631985024477*^9, 3.72163199109648*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Arbitrary piecewise constant envelope functions", "Section",
 CellChangeTimes->{{3.721110390798583*^9, 3.7211104688817587`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Function", " ", "definition", " ", 
     RowBox[{"format", ":", " ", 
      RowBox[{"list", " ", "containing", " ", "pairs", " ", "of", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"value", " ", "of", " ", "section"}], ",", " ", 
         RowBox[{"end", " ", "time", " ", "of", " ", "section"}]}], 
        ")"}]}]}]}], ",", " ", 
    RowBox[{"time", " ", "starts", " ", "at", " ", "0"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Time", " ", "the", " ", "drive", " ", "is", " ", "on", " ", "lies", " ", 
     "between", " ", 
     RowBox[{"(", 
      RowBox[{"0", ",", " ", "1"}], ")"}]}], ",", " ", 
    RowBox[{"average", " ", "value", " ", "should", " ", "be", " ", "1"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"pcListToFunction", "[", "pclist_", "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{"t", ",", 
     RowBox[{"Evaluate", "[", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"t", "<", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], "&"}], "/@", 
         "pclist"}], ",", "0"}], "]"}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.721110470960313*^9, 3.721110520290901*^9}, {
   3.721110550501232*^9, 3.721110615275423*^9}, {3.721110654200328*^9, 
   3.721110740377912*^9}, {3.721110967532399*^9, 3.7211109690580397`*^9}, {
   3.7211230942108994`*^9, 3.7211230986727*^9}, {3.721123500217346*^9, 
   3.721123505356749*^9}, 3.7211241070133057`*^9, {3.721126204979721*^9, 
   3.721126206922133*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sflist", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "2"}], ",", 
       RowBox[{"1", "/", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "/", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "Infinity"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7211276048520517`*^9, 3.721127612521183*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NPCEffectiveTrajectory", "[", 
   RowBox[{
   "pclist_", ",", "tM_", ",", "H1avg_", ",", "\[Psi]0_", ",", "\[Alpha]0_", 
    ",", "approxH_", ",", "jumpOp_", ",", "vals_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"driveList", ",", "evolOps", ",", "jumpOps"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"driveList", "=", "pclist"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"driveList", "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", "1"}], "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"driveList", "[", 
        RowBox[{"[", 
         RowBox[{";;", ",", "1"}], "]"}], "]"}], "*", "H1avg"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"driveList", "[", 
       RowBox[{"[", 
        RowBox[{";;", ",", "2"}], "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"driveList", "[", 
        RowBox[{"[", 
         RowBox[{";;", ",", "2"}], "]"}], "]"}], "*", "tM"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"evolOps", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"t", ",", 
          RowBox[{"MatrixExp", "[", 
           RowBox[{
            RowBox[{"-", "I"}], "*", "t", "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"approxH", "/.", "vals"}], "/.", "H1Dsubs"}], "/.", 
              RowBox[{"H1", "\[Rule]", "#"}]}], ")"}]}], "]"}]}], "]"}], 
        "&"}], "/@", 
       RowBox[{"driveList", "[", 
        RowBox[{"[", 
         RowBox[{";;", ",", "1"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"jumpOps", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"jumpOp", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"HA", "\[Rule]", 
            RowBox[{"driveList", "[", 
             RowBox[{"[", 
              RowBox[{"ii", ",", "1"}], "]"}], "]"}]}], ",", 
           RowBox[{"HB", "\[Rule]", 
            RowBox[{"driveList", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"ii", "+", "1"}], ",", "1"}], "]"}], "]"}]}], ",", 
           RowBox[{"\[Alpha]0", "\[Rule]", "\[Alpha]0"}], ",", 
           RowBox[{"\[Alpha]j", "\[Rule]", 
            RowBox[{"driveList", "[", 
             RowBox[{"[", 
              RowBox[{"ii", ",", "2"}], "]"}], "]"}]}]}], "}"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"ii", ",", 
          RowBox[{
           RowBox[{"Length", "[", "driveList", "]"}], "-", "1"}]}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"\[Psi]", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{"t", ",", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Apply", "[", 
            RowBox[{"Dot", ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"ii", ",", 
             RowBox[{"Length", "[", "sflist", "]"}]}], "}"}]}], "]"}], 
         "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.721124535499888*^9, 3.7211245473412123`*^9}, {
   3.721124598744615*^9, 3.7211246015759773`*^9}, {3.7211247585793543`*^9, 
   3.721124778523177*^9}, 3.721124958067183*^9, {3.721124990440796*^9, 
   3.7211249915289993`*^9}, {3.7211251452694473`*^9, 3.721125264088298*^9}, {
   3.721125389125045*^9, 3.721125390548987*^9}, {3.7211256183471937`*^9, 
   3.7211256820393677`*^9}, {3.7211257476697083`*^9, 3.721125796122714*^9}, {
   3.721126047823106*^9, 3.721126091359181*^9}, {3.7211261228427877`*^9, 
   3.721126273141433*^9}, {3.721126550638373*^9, 3.7211265593572607`*^9}, {
   3.7211266715535727`*^9, 3.721126717930818*^9}, 3.721126791821681*^9, {
   3.7211272568328*^9, 3.721127290104702*^9}, {3.721127333849997*^9, 
   3.721127408370816*^9}, {3.721127448422719*^9, 3.721127482941351*^9}, {
   3.721127531263245*^9, 3.721127531990428*^9}, {3.721127630282083*^9, 
   3.7211276348911753`*^9}, {3.721127675028961*^9, 3.721127706683279*^9}, {
   3.721127757456492*^9, 3.721127910328795*^9}, 3.7211280027864857`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting helper functions", "Section",
 CellChangeTimes->{{3.72111008111263*^9, 3.7211100853819227`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Precompute", " ", "the", " ", "static", " ", "bloch", " ", "sphere", " ", 
    "elements", " ", 
    RowBox[{"(", 
     RowBox[{"circumferences", " ", "and", " ", "axes"}], ")"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"BlochSphereCircles", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"r", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ParametricPlot3D", "[", 
          RowBox[{
           RowBox[{"0.99", "*", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"r", " ", 
               RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", 
              RowBox[{"r", " ", 
               RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", "0", ",", 
             RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Thin", ",", "Gray"}], "}"}]}], ",", 
           RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ParametricPlot3D", "[", 
          RowBox[{
           RowBox[{"0.99", "*", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"r", " ", 
               RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", 
              RowBox[{"r", " ", 
               RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", "0", ",", 
             RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Thin", ",", "Gray"}], "}"}]}], ",", 
           RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ParametricPlot3D", "[", 
          RowBox[{
           RowBox[{"0.99", "*", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"r", " ", 
               RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", "0", ",", 
              RowBox[{"r", " ", 
               RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", "0", ",", 
             RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Thin", ",", "Gray"}], "}"}]}], ",", 
           RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"BlochSphereAxes", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"r", "=", "1"}], "}"}], ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"Graphics3D", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
          "Thin", ",", " ", "Gray", ",", " ", "Dashed", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1."}], ",", "0.", ",", "0."}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1.", ",", "0.", ",", "0."}], "}"}]}], "}"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", 
                RowBox[{"-", "1."}], ",", "0."}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.", ",", "1.", ",", "0."}], "}"}]}], "}"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0.", ",", 
                RowBox[{"-", "1."}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.", ",", "0.", ",", "1."}], "}"}]}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", "}"}]}],
       "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "trace", " ", "on", " ", "Bloch", " ", "sphere"}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotBlochTraceFromState", "[", 
      RowBox[{"\[Psi]_", ",", "range_", ",", 
       RowBox[{"opts", " ", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "ParametricPlot3D", "}"}], "]"}]}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot3D", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"BlochCoordinatesFromState", "[", 
        RowBox[{"\[Psi]", "[", "t", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"Evaluate", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "t", "}"}], ",", "range"}], "]"}], "]"}], ",", 
       "\[IndentingNewLine]", "opts", ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "a", " ", "vector", " ", "from", " ", "the", " ", "center", 
     " ", "of", " ", "the", " ", "Bloch", " ", "sphere", " ", "to", " ", 
     "the", " ", "surface", " ", "for", " ", "a", " ", "given", " ", "state", 
     " ", "\[Psi]"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotBlochVectorFromState", "[", 
      RowBox[{"\[Psi]_", ",", 
       RowBox[{"style_List", " ", ":", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"PlotBlochVector", "[", 
      RowBox[{
       RowBox[{"BlochCoordinatesFromState", "[", "\[Psi]", "]"}], ",", 
       "style"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "a", " ", "vector", " ", "from", " ", "the", " ", "center", 
     " ", "of", " ", "the", " ", "Bloch", " ", "sphere", " ", "to", " ", 
     "the", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], " ", "coordinates", 
     " ", "given", " ", "by", " ", "vec"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotBlochVector", "[", 
      RowBox[{"vec_", ",", 
       RowBox[{"style_List", " ", ":", " ", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"Graphics3D", "[", 
      RowBox[{"Evaluate", "[", 
       RowBox[{"Join", "[", "\[IndentingNewLine]", 
        RowBox[{"style", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0.", ",", "0."}], "}"}], ",", "vec"}], 
            "}"}], "]"}], "}"}]}], "\[IndentingNewLine]", "]"}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "points", " ", "given", " ", "by", " ", "a", " ", "list", 
     " ", "of", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], " ", "tuples", " ", 
     "in", " ", "pts"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotBlochPoints", "[", 
      RowBox[{"pts_", ",", 
       RowBox[{"style_List", " ", ":", " ", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"Graphics3D", "[", 
      RowBox[{"Evaluate", "[", 
       RowBox[{"Join", "[", "\[IndentingNewLine]", 
        RowBox[{"style", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"Point", "[", "pts", "]"}], "}"}]}], "\[IndentingNewLine]", 
        "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "points", " ", "given", " ", "by", " ", "a", " ", "list", 
     " ", "of", " ", "state", " ", "vectors", " ", "\[Psi]s"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PlotBlochPointsFromStates", "[", 
     RowBox[{"\[Psi]s_", ",", 
      RowBox[{"style_List", " ", ":", " ", 
       RowBox[{"{", "}"}]}]}], "]"}], ":=", 
    RowBox[{"PlotBlochPoints", "[", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"BlochCoordinatesFromState", ",", "\[Psi]s"}], "]"}], ",", 
      "style"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "BlochAngle", " ", "trace"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotBlochAngleTraceFromState", "[", 
      RowBox[{"\[Psi]_", ",", "range_", ",", 
       RowBox[{"opts", " ", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "ParametricPlot", "}"}], "]"}]}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ParametricPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"BlochAngleCoordinatesFromState", "[", 
         RowBox[{"\[Psi]", "[", "t", "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "t", "}"}], ",", "range"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", "opts"}], "\[IndentingNewLine]", "]"}], "/.", 
      RowBox[{
       RowBox[{"Line", "[", "x_", "]"}], "\[RuleDelayed]", 
       RowBox[{"Line", "@", 
        RowBox[{"Split", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"#", "-", "#2"}], "]"}], "<", "1.5"}], "&"}]}], 
         "]"}]}]}]}]}], 
    RowBox[{"(*", " ", 
     RowBox[{
     "This", " ", "stuff", " ", "is", " ", "necessary", " ", "to", " ", 
      "remove", " ", "discontinuous", " ", "jumps"}], " ", "*)"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "mercator", " ", "Bloch", " ", "trace"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PlotMercatorBlochTraceFromState", "[", 
      RowBox[{"\[Psi]_", ",", "range_", ",", 
       RowBox[{"opts", " ", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "ParametricPlot", "}"}], "]"}]}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ParametricPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MercatorCoordinatesFromBlochAngle", "[", 
         RowBox[{"BlochAngleCoordinatesFromState", "[", 
          RowBox[{"\[Psi]", "[", "t", "]"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "t", "}"}], ",", "range"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", "opts"}], "\[IndentingNewLine]", "]"}], "/.", 
      RowBox[{
       RowBox[{"Line", "[", "x_", "]"}], "\[RuleDelayed]", 
       RowBox[{"Line", "@", 
        RowBox[{"Split", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"#", "-", "#2"}], "]"}], "<", "1.5"}], "&"}]}], 
         "]"}]}]}]}]}], 
    RowBox[{"(*", " ", 
     RowBox[{
     "This", " ", "stuff", " ", "is", " ", "necessary", " ", "to", " ", 
      "remove", " ", "discontinuous", " ", "jumps"}], " ", "*)"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.720505899810814*^9, 3.7205059013441477`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting code", "Chapter",
 CellChangeTimes->{{3.720349110741601*^9, 3.7203491126040497`*^9}}],

Cell[CellGroupData[{

Cell["3D plots", "Section",
 CellChangeTimes->{{3.7203491161574183`*^9, 3.7203491326688643`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Bloch3DPlotter", ":=", 
    RowBox[{"Hold", "[", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Join", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Plot", " ", "the", " ", "trajectory"}], ",", " ", 
            RowBox[{
            "state", " ", "vector", " ", "and", " ", "instantaneous", " ", 
             "rotation", " ", "axis", " ", "of", " ", "the", " ", "qubit", 
             " ", "under", " ", "the", " ", "original", " ", 
             "Hamiltonian"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"PlotBlochTraceFromState", "[", 
            RowBox[{"origTrace", ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotBlochVectorFromState", "[", 
            RowBox[{
             RowBox[{"origTrace", "[", 
              RowBox[{"tM", "*", "tMax"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"Red", ",", " ", 
               RowBox[{"Thickness", "[", "0.015", "]"}]}], "}"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"PlotBlochVector", "[", 
            RowBox[{
             RowBox[{"RotationAxisFromHamiltonian", "[", 
              RowBox[{"hOrigFunc", "[", 
               RowBox[{
                RowBox[{"tM", "*", "tMax"}], ",", "0.0"}], "]"}], "]"}], ",", 
             
             RowBox[{"{", 
              RowBox[{"Gray", ",", 
               RowBox[{"Thickness", "[", "0.010", "]"}]}], "}"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"PlotBlochPointsFromStates", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"origTrace", ",", "relevantTCoincidence"}], "]"}], ",", 
             
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red"}], 
              "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Plot", " ", "the", " ", "trajectory", " ", "of", " ", "the", " ", 
           "qubit", " ", "under", " ", "the", " ", "approximate", " ", 
           "Hamiltonians"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PlotBlochTraceFromState", "[", 
            RowBox[{
             RowBox[{"approxTraces", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"approxColors", "[", 
               RowBox[{"[", " ", 
                RowBox[{"calculatedOrders", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}]}], "]"}],
            ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Plot", " ", "the", " ", "points", " ", "where", " ", "the", " ", 
           "approximate", " ", "trajectories", " ", 
           RowBox[{"(", "should", ")"}], " ", "coincide", " ", "with", " ", 
           "the", " ", "original", " ", "trajectory"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PlotBlochPointsFromStates", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{"approxTraces", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "relevantTCoincidence"}],
               "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "Large", "]"}], ",", 
               RowBox[{"approxColors", "[", 
                RowBox[{"[", " ", 
                 RowBox[{"calculatedOrders", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
              "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"PlotBlochPointsFromStates", "[", 
           RowBox[{"coolStates", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"PointSize", "[", "Large", "]"}], ",", "Cyan"}], 
             "}"}]}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Plot", " ", "the", " ", "t"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"0", " ", "and", " ", "t"}], " ", "=", " ", 
             RowBox[{"t_f", " ", "jump", " ", "displacements"}]}]}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"PlotBlochTraceFromState", "[", 
              RowBox[{
               RowBox[{"approx\[Psi]0", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Dashed", ",", " ", 
                  RowBox[{"approxColors", "[", 
                   RowBox[{"[", " ", 
                    RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
                 "}"}]}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"PlotBlochTraceFromState", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{"t", ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"finalJumps", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", "t", "]"}], ".", 
                  RowBox[{
                   RowBox[{"approxTraces", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                   RowBox[{"tM", "*", "tMax"}], "]"}]}]}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"Dashed", ",", " ", 
                  RowBox[{"approxColors", "[", 
                   RowBox[{"[", " ", 
                    RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
                 "}"}]}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}], 
           ","}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "static", " ", "Bloch", " ", "sphere", " ", 
           "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
         "BlochSphereCircles", ",", "\[IndentingNewLine]", 
         "BlochSphereAxes"}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"500", ",", "500"}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"ViewAngle", "->", 
        RowBox[{"Pi", "/", "10"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"Axes", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Boxed", "\[Rule]", "False"}]}], "\[IndentingNewLine]", "]"}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.71965440505723*^9, 3.719654452102209*^9}, {
   3.719654674060545*^9, 3.719654702869274*^9}, {3.719655508107579*^9, 
   3.719655526354762*^9}, {3.719657512358118*^9, 3.7196575140282583`*^9}, {
   3.719657606966461*^9, 3.719657611640386*^9}, {3.719662541770338*^9, 
   3.719662544425715*^9}, {3.719662625109373*^9, 3.719662628605137*^9}, {
   3.719662663367815*^9, 3.719662669335495*^9}, 3.719662704950479*^9, {
   3.7196635194614553`*^9, 3.719663565642974*^9}, {3.719663736795269*^9, 
   3.719663854251069*^9}, {3.719663984969365*^9, 3.7196639870074778`*^9}, {
   3.719664020674241*^9, 3.719664121158648*^9}, {3.7196641711675653`*^9, 
   3.719664189486896*^9}, {3.71966437771943*^9, 3.719664378404018*^9}, {
   3.719665318712253*^9, 3.719665390125635*^9}, {3.719665580709318*^9, 
   3.719665646073825*^9}, 3.719725396498043*^9, {3.7197257200427322`*^9, 
   3.719725785884077*^9}, {3.719725822556342*^9, 3.7197258251010942`*^9}, {
   3.719725989354001*^9, 3.7197260028892193`*^9}, {3.719726193801155*^9, 
   3.719726198344083*^9}, {3.719726277620516*^9, 3.719726283818696*^9}, {
   3.719726354815783*^9, 3.719726378278873*^9}, {3.7197265657339993`*^9, 
   3.719726588676334*^9}, {3.719726672655373*^9, 3.719726705026067*^9}, {
   3.71972795518334*^9, 3.7197280766738787`*^9}, {3.719728147204784*^9, 
   3.719728160898158*^9}, {3.719729227395198*^9, 3.719729279699827*^9}, {
   3.719729613243144*^9, 3.7197297188378067`*^9}, {3.719729785104641*^9, 
   3.7197297916086206`*^9}, {3.719729832297455*^9, 3.719729924459887*^9}, {
   3.719729979097412*^9, 3.71972998131817*^9}, {3.719730030233679*^9, 
   3.719730032904345*^9}, 3.719730159287866*^9, {3.719730351583226*^9, 
   3.719730371607519*^9}, {3.7197305373153563`*^9, 3.719730567858818*^9}, {
   3.719730608124115*^9, 3.719730697896439*^9}, {3.7197308187913733`*^9, 
   3.719731050265031*^9}, {3.719731131151889*^9, 3.719731257267704*^9}, {
   3.7197313143414392`*^9, 3.719731372327129*^9}, {3.7197314547622433`*^9, 
   3.7197314783220367`*^9}, {3.719731524980694*^9, 3.719731593527*^9}, 
   3.7197316336068687`*^9, {3.719731992082862*^9, 3.7197320151148567`*^9}, {
   3.719732748119629*^9, 3.719732851854064*^9}, {3.7197328899051027`*^9, 
   3.7197328948084784`*^9}, {3.7197329327062607`*^9, 3.719732933728594*^9}, {
   3.71973303737566*^9, 3.71973306993294*^9}, {3.719733167347945*^9, 
   3.71973317633293*^9}, {3.7197335847993593`*^9, 3.7197335848066587`*^9}, {
   3.719733768925458*^9, 3.7197339297769823`*^9}, {3.71973397704596*^9, 
   3.7197340738104753`*^9}, {3.719734142221374*^9, 3.719734148600995*^9}, {
   3.719737410434022*^9, 3.7197374196115923`*^9}, {3.7197374707945433`*^9, 
   3.7197374739364157`*^9}, {3.719739622793873*^9, 3.7197397000068483`*^9}, {
   3.7197398319804983`*^9, 3.719739898920965*^9}, {3.719739971782125*^9, 
   3.719740089488901*^9}, {3.719740404220591*^9, 3.719740409874135*^9}, {
   3.7197404902076283`*^9, 3.719740571638661*^9}, {3.7197410313203*^9, 
   3.7197410503182507`*^9}, {3.719741121879806*^9, 3.71974117754482*^9}, {
   3.719741255202168*^9, 3.71974135947784*^9}, {3.7197414046488457`*^9, 
   3.719741470762108*^9}, {3.7197416516644793`*^9, 3.7197417115878963`*^9}, {
   3.719741744193177*^9, 3.719741767017825*^9}, {3.719741806060226*^9, 
   3.7197418150240927`*^9}, {3.719741894073694*^9, 3.719742024722701*^9}, {
   3.719742089576519*^9, 3.71974221270998*^9}, {3.7197422462915382`*^9, 
   3.71974226678841*^9}, {3.719742367841947*^9, 3.7197423861490498`*^9}, {
   3.719742445922613*^9, 3.719742477138301*^9}, {3.719742941971538*^9, 
   3.7197429773772917`*^9}, {3.719743007755834*^9, 3.7197430214095917`*^9}, {
   3.719743074741489*^9, 3.719743099028145*^9}, {3.7197431470330477`*^9, 
   3.719743148430347*^9}, {3.7197432081005373`*^9, 3.719743252056549*^9}, {
   3.7197434238639717`*^9, 3.719743434209897*^9}, {3.719743481769442*^9, 
   3.7197435941957827`*^9}, {3.7197436743197317`*^9, 3.719743707914002*^9}, {
   3.7197437601792727`*^9, 3.719743761463875*^9}, {3.7197438959599743`*^9, 
   3.719743896251837*^9}, {3.719743980824048*^9, 3.719744039519884*^9}, {
   3.71974407663945*^9, 3.719744077959858*^9}, {3.71974412137658*^9, 
   3.7197443108652143`*^9}, {3.7197444202114687`*^9, 
   3.7197444513077803`*^9}, {3.719744481614853*^9, 3.719744679803318*^9}, {
   3.7197447325833883`*^9, 3.7197447331771393`*^9}, {3.719744911692194*^9, 
   3.719744912256269*^9}, {3.7197449638534822`*^9, 3.719744984859655*^9}, {
   3.719745052670991*^9, 3.719745055917173*^9}, {3.719745176627383*^9, 
   3.719745186909519*^9}, {3.719745228208479*^9, 3.719745237732038*^9}, {
   3.719746399671158*^9, 3.719746479871434*^9}, {3.719746545220299*^9, 
   3.719746621029441*^9}, 3.719746747927788*^9, {3.719746799124988*^9, 
   3.7197469339805927`*^9}, {3.719746976946539*^9, 3.71974703642428*^9}, {
   3.719747100670011*^9, 3.7197471020664597`*^9}, {3.7198119359065437`*^9, 
   3.719811953752569*^9}, {3.719812061519149*^9, 3.719812063628517*^9}, 
   3.719813267447775*^9, 3.719832746783979*^9, 3.7198428663838882`*^9, {
   3.719843354205288*^9, 3.719843363712579*^9}, {3.719843444367652*^9, 
   3.719843502247257*^9}, {3.719843537230729*^9, 3.719843545435014*^9}, {
   3.720246413114575*^9, 3.720246414290749*^9}, {3.720246522590025*^9, 
   3.720246523257423*^9}, 3.720268295639347*^9, 3.720349143625721*^9, {
   3.720503221707087*^9, 3.720503251315072*^9}, {3.720503281956786*^9, 
   3.720503293085417*^9}, {3.720504877053884*^9, 3.720504884432884*^9}, {
   3.7205060857987757`*^9, 3.7205061378284187`*^9}, {3.720509189462253*^9, 
   3.720509191525303*^9}, {3.72051122820717*^9, 3.720511231103367*^9}, {
   3.7208687519522552`*^9, 3.720868757989324*^9}, {3.7208700198551207`*^9, 
   3.720870029893828*^9}, {3.720870118547086*^9, 3.720870123364106*^9}, {
   3.7210392637320747`*^9, 3.721039334371645*^9}, {3.7210394084079847`*^9, 
   3.721039420815668*^9}, {3.721040386223958*^9, 3.7210403914233503`*^9}, {
   3.7210493780358353`*^9, 3.7210494387251787`*^9}, {3.7210494737766247`*^9, 
   3.721049474445922*^9}, {3.721049596098652*^9, 3.721049612738986*^9}, 
   3.721632235552032*^9, {3.72163385563221*^9, 3.721633893420753*^9}, {
   3.72163435511415*^9, 3.721634372992669*^9}, {3.721634500977721*^9, 
   3.721634502408278*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cartesian Bloch angle plots", "Section",
 CellChangeTimes->{{3.7203491486514997`*^9, 3.720349156317628*^9}, {
  3.720358276007145*^9, 3.720358277511012*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BlochAnglePlotter", ":=", 
   RowBox[{"Hold", "[", "\[IndentingNewLine]", 
    RowBox[{"Show", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Join", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Plot", " ", "the", " ", "trajectory", " ", "and", " ", 
           "stroboscopic", " ", "coincidence", " ", "points", " ", "of", " ", 
           "the", " ", "qubit", " ", "under", " ", "the", " ", "original", 
           " ", "Hamiltonian"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"PlotBlochAngleTraceFromState", "[", 
           RowBox[{
            RowBox[{"XBasisFromZBasis", "@*", "origTrace"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"PlotStyle", "\[Rule]", "Red"}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
             RowBox[{"Point", "[", 
              RowBox[{"BlochAngleCoordinatesFromState", "/@", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"XBasisFromZBasis", "@*", "origTrace"}], ")"}], "/@",
                 "relevantTCoincidence"}]}], "]"}]}], "}"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", "Cyan", ",", 
             RowBox[{"Point", "[", 
              RowBox[{"BlochAngleCoordinatesFromState", "/@", 
               RowBox[{"XBasisFromZBasis", "/@", "coolStates"}]}], "]"}]}], 
            "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Plot", " ", "the", " ", "trajectory", " ", "of", " ", "the", " ", 
          "qubit", " ", "under", " ", "the", " ", "approximate", " ", 
          "Hamiltonians"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"PlotBlochAngleTraceFromState", "[", 
           RowBox[{
            RowBox[{"XBasisFromZBasis", " ", "@*", 
             RowBox[{"(", 
              RowBox[{"approxTraces", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"approxColors", "[", 
              RowBox[{"[", " ", 
               RowBox[{"calculatedOrders", "[", 
                RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}]}], " ", 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Plot", " ", "the", " ", "points", " ", "where", " ", "the", " ", 
          "approximate", " ", "trajectories", " ", 
          RowBox[{"(", "should", ")"}], " ", "coincide", " ", "with", " ", 
          "the", " ", "original", " ", "trajectory"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Graphics", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", 
             RowBox[{"approxColors", "[", 
              RowBox[{"[", " ", 
               RowBox[{"calculatedOrders", "[", 
                RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}], ",", 
             RowBox[{"Point", "[", 
              RowBox[{"BlochAngleCoordinatesFromState", "/@", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"XBasisFromZBasis", "@*", 
                  RowBox[{"(", 
                   RowBox[{"approxTraces", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}], "/@", 
                "relevantTCoincidence"}]}], "]"}]}], "}"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"(*", " ", 
         RowBox[{"Plot", " ", "the", " ", "jump", " ", "displacements"}], " ",
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PlotBlochAngleTraceFromState", "[", 
            RowBox[{
             RowBox[{"XBasisFromZBasis", "@*", 
              RowBox[{"(", 
               RowBox[{"approx\[Psi]0", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Dashed", ",", " ", 
                RowBox[{"approxColors", "[", 
                 RowBox[{"[", " ", 
                  RowBox[{"calculatedOrders", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
               "}"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PlotBlochAngleTraceFromState", "[", 
            RowBox[{
             RowBox[{"XBasisFromZBasis", "@*", 
              RowBox[{"Function", "[", 
               RowBox[{"t", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"finalJumps", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", "t", "]"}], ".", 
                 RowBox[{
                  RowBox[{"approxTraces", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "[", 
                  RowBox[{"tM", "*", "tMax"}], "]"}]}]}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Dashed", ",", " ", 
                RowBox[{"approxColors", "[", 
                 RowBox[{"[", " ", 
                  RowBox[{"calculatedOrders", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
               "}"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}]}], 
        "*)"}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "Pi"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"AspectRatio", "\[Rule]", "0.5"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"800", ",", "400"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<x-basis phase angle \[Phi]\\n\[Phi] = arg(<\[Psi]|->) - arg(<\
\[Psi]|+>)\\n'longitude'\>\"", ",", 
         "\"\<x-basis population angle \[Theta]\\ncos(\[Theta]/2) = \
|<\[Psi]|+>|\\n'latitude'\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Bloch angle coordinates in the X-basis\>\""}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.720349177905793*^9, 3.720349179320332*^9}, {
  3.720355569185862*^9, 3.720355572720828*^9}, {3.7205048805844927`*^9, 
  3.720504883185042*^9}, {3.720505694807459*^9, 3.720505742305789*^9}, {
  3.7205061512319*^9, 3.7205062122944803`*^9}, {3.720509164985203*^9, 
  3.7205091682638073`*^9}, {3.720511225983327*^9, 3.7205112377910023`*^9}, {
  3.7210396323685417`*^9, 3.7210396700324583`*^9}, {3.721040393503813*^9, 
  3.7210403969945*^9}, {3.72104983188336*^9, 3.721049857571003*^9}, {
  3.7216322249928617`*^9, 3.721632244827613*^9}, {3.721649666859511*^9, 
  3.7216496952268248`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mercator plots", "Section",
 CellChangeTimes->{{3.720349180673524*^9, 3.720349185766903*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BlochMercatorPlotter", ":=", 
    RowBox[{"Hold", "[", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Join", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Plot", " ", "the", " ", "trajectory", " ", "and", " ", 
            "stroboscopic", " ", "coincidence", " ", "points", " ", "of", " ",
             "the", " ", "qubit", " ", "under", " ", "the", " ", "original", 
            " ", "Hamiltonian"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"PlotMercatorBlochTraceFromState", "[", 
            RowBox[{
             RowBox[{"XBasisFromZBasis", "@*", "origTrace"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
              RowBox[{"Point", "[", 
               RowBox[{"MercatorCoordinatesFromBlochAngle", "/@", 
                RowBox[{"BlochAngleCoordinatesFromState", "/@", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"XBasisFromZBasis", "@*", "origTrace"}], ")"}], "/@",
                   "relevantTCoincidence"}]}]}], "]"}]}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Plot", " ", "the", " ", "trajectory", " ", "of", " ", "the", " ", 
           "qubit", " ", "under", " ", "the", " ", "approximate", " ", 
           "Hamiltonians"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"PlotMercatorBlochTraceFromState", "[", 
            RowBox[{
             RowBox[{"XBasisFromZBasis", "@*", 
              RowBox[{"(", 
               RowBox[{"approxTraces", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"tM", "*", "tMax"}]}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"approxColors", "[", 
               RowBox[{"[", " ", 
                RowBox[{"calculatedOrders", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}]}], "]"}],
            ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Plot", " ", "the", " ", "points", " ", "where", " ", "the", " ", 
           "approximate", " ", "trajectories", " ", 
           RowBox[{"(", "should", ")"}], " ", "coincide", " ", "with", " ", 
           "the", " ", "original", " ", "trajectory"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"PointSize", "[", "Large", "]"}], ",", 
              RowBox[{"approxColors", "[", 
               RowBox[{"[", " ", 
                RowBox[{"calculatedOrders", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{"MercatorCoordinatesFromBlochAngle", "/@", 
                RowBox[{"BlochAngleCoordinatesFromState", "/@", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"XBasisFromZBasis", "@*", 
                    RowBox[{"(", 
                    RowBox[{"approxTraces", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}], "/@", 
                  "relevantTCoincidence"}]}]}], "]"}]}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"(*", " ", 
          RowBox[{"Plot", " ", "the", " ", "jump", " ", "displacements"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"PlotMercatorBlochTraceFromState", "[", 
             RowBox[{
              RowBox[{"XBasisFromZBasis", " ", "@*", 
               RowBox[{"(", 
                RowBox[{"approx\[Psi]0", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Dashed", ",", " ", 
                 RowBox[{"approxColors", "[", 
                  RowBox[{"[", " ", 
                   RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
                "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"PlotMercatorBlochTraceFromState", "[", 
             RowBox[{
              RowBox[{"XBasisFromZBasis", "@*", 
               RowBox[{"Function", "[", 
                RowBox[{"t", ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"finalJumps", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", "t", "]"}], ".", 
                  RowBox[{
                   RowBox[{"approxTraces", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                   RowBox[{"tM", "*", "tMax"}], "]"}]}]}], "]"}]}], ",", " ", 
              
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Dashed", ",", " ", 
                 RowBox[{"approxColors", "[", 
                  RowBox[{"[", " ", 
                   RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}]}], 
                "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "numSelectedOrders"}], "}"}]}], "]"}]}], 
         "*)"}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AspectRatio", "\[Rule]", "0.5"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"800", ",", "400"}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Mercator longitude \[Phi],\\nx-basis phase angle \
\[Phi]\\n\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\\n\>\"", ",", 
          "\"\<Mercator z-intersect z(\[Theta]),\\nx-basis population angle \
\[Theta]\\ncos(\[Theta]/2) = |<\[Psi]|+>|\>\""}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.71975408758805*^9, 3.719754110021474*^9}, {
   3.71975452981112*^9, 3.719754606574605*^9}, {3.7197546407783012`*^9, 
   3.7197546472498083`*^9}, {3.719817864184292*^9, 3.719817909721388*^9}, {
   3.7198195019856577`*^9, 3.719819503285576*^9}, {3.719820235918066*^9, 
   3.719820251476564*^9}, {3.7198305755691357`*^9, 3.719830650051548*^9}, {
   3.719830821928141*^9, 3.71983084255162*^9}, {3.719831527367661*^9, 
   3.7198315552291822`*^9}, {3.719831613657439*^9, 3.719831643177147*^9}, {
   3.719831705045723*^9, 3.719831718901246*^9}, {3.7198318221473017`*^9, 
   3.7198318312066927`*^9}, {3.7198320641366243`*^9, 3.719832088334985*^9}, {
   3.719832134179079*^9, 3.719832144872622*^9}, {3.7198323815882187`*^9, 
   3.719832471802874*^9}, {3.7198325240014887`*^9, 3.719832537116781*^9}, 
   3.7198328266032667`*^9, {3.719843174759067*^9, 3.719843244248317*^9}, {
   3.7198437511308002`*^9, 3.719843788827873*^9}, {3.71984384298101*^9, 
   3.719843864113104*^9}, {3.720243702204912*^9, 3.7202437875619783`*^9}, {
   3.720243943503297*^9, 3.720243987025612*^9}, {3.7202464165341167`*^9, 
   3.7202464172056713`*^9}, {3.72024652475279*^9, 3.720246525600177*^9}, {
   3.720349200187489*^9, 3.7203492111628036`*^9}, {3.7203492623724937`*^9, 
   3.720349272891117*^9}, {3.720349762101885*^9, 3.720349764371441*^9}, {
   3.720504887848832*^9, 3.720504889168459*^9}, {3.7205057516031103`*^9, 
   3.720505759989237*^9}, {3.7205062204664783`*^9, 3.7205062598765697`*^9}, {
   3.720509177535778*^9, 3.7205091823988943`*^9}, {3.7205112202573357`*^9, 
   3.720511220601502*^9}, {3.7205112516885767`*^9, 3.720511257207906*^9}, {
   3.72103968003988*^9, 3.721039685345126*^9}, {3.7210403994577436`*^9, 
   3.721040403537895*^9}, {3.7210498742120953`*^9, 3.7210498778702602`*^9}, {
   3.7216322224935923`*^9, 3.7216322485338383`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive trajectory manipulation code", "Section",
 CellChangeTimes->{{3.720349274914537*^9, 3.720349289002267*^9}, {
  3.720349585158554*^9, 3.720349590148341*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"approxColors", "=", 
    RowBox[{"Array", "[", 
     RowBox[{
      RowBox[{"ColorData", "[", "\"\<BlueGreenYellow\>\"", "]"}], ",", 
      RowBox[{"Length", "[", "ApproxHList", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.", ",", "1."}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InteractiveTrajectoryPlotting", "[", "plotExprs_List", "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"DynamicModule", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "origTrace", ",", "approxTraces", ",", "\[Psi]0", ",", "gateAngle", ",", 
      "tMax", ",", "H1func", ",", "vals", ",", "hOrigFunc", ",", 
      "\[IndentingNewLine]", "tCoincidence", ",", "t0", ",", "tC", ",", 
      "relevantTCoincidence", ",", "selectedH1Profile", ",", 
      "selectedH1Index", ",", "numSelectedOrders", ",", "\[IndentingNewLine]",
       "selectedJmpOperators", ",", "approx\[Psi]0", ",", "jmpFuncs", ",", 
      "calculatedOrders", ",", "\[Alpha]f", ",", " ", "finalJumps", ",", 
      "firstCoincidenceState", ",", "Omg1", ",", "coolStates"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Text", "[", "\"\<Select driving envelope:  \>\"", "]"}], 
          ",", 
          RowBox[{"PopupMenu", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "selectedH1Index", "]"}], ",", 
            "H1pOptions"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"H1pList", "[", 
               RowBox[{"[", "selectedH1Index", "]"}], "]"}], "@", "t"}], ",", 
             
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", "1"}], "}"}], ",", 
             RowBox[{"AxesLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<t/t_max\>\"", ",", "\"\<H1/H1_avg\>\""}], "}"}]}],
              ",", 
             RowBox[{
             "PlotLabel", "\[Rule]", "\"\<driving envelope H1(t)\>\""}], ",", 
             
             RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], "]"}]}], 
         "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Define", " ", "initial", " ", "state", " ", "and", " ", "desired", 
          " ", "gate", " ", "angle"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"\[Psi]0", "=", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"\[Psi]0", "=", 
           RowBox[{"\[Psi]0", "/", 
            RowBox[{"Norm", "[", "\[Psi]0", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"gateAngle", " ", "=", " ", "Pi"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tMax", " ", "=", " ", 
           RowBox[{"2", "*", 
            RowBox[{"gateAngle", "/", "H1avg"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "selectedH1Index", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"selectedH1Profile", "=", 
           RowBox[{"H1pList", "[", 
            RowBox[{"[", "selectedH1Index", "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"H1func", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"t", ",", 
             RowBox[{
              RowBox[{"selectedH1Profile", "[", 
               RowBox[{"t", "/", "tMax"}], "]"}], "*", "H1avg"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"vals", " ", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ww", "\[Rule]", "wwIn"}], ",", 
             RowBox[{"Delta", "\[Rule]", "DeltaIn"}], ",", 
             RowBox[{"phi", "\[Rule]", "phiIn"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Assemble", " ", "Hamiltonians", " ", "based", " ", "on", " ", 
            "the", " ", "given", " ", "parameters", " ", "and", " ", 
            "numerically", " ", "solve", " ", "trajectories", " ", "of", " ", 
            "qubit"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"hOrigFunc", "=", 
           RowBox[{"GetHFunc", "[", 
            RowBox[{"Horig", ",", "H1func", ",", "vals"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"origTrace", "=", 
           RowBox[{"\[Psi]", "/.", 
            RowBox[{"NTrajectory", "[", 
             RowBox[{
             "hOrigFunc", ",", "tMax", ",", "\[Alpha]0", ",", "\[Psi]0"}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Compute", " ", "the", " ", "times", " ", "at", " ", "which", " ", 
            "the", " ", "Magnus", " ", "and", " ", "the", " ", "real", " ", 
            "Hamiltonians", " ", "are", " ", "supposed", " ", "to", " ", 
            "coincide"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"t0", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"\[Alpha]0", "/", "ww"}], ")"}], "/.", "vals"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tC", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Pi", "/", "ww"}], ")"}], "/.", "vals"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tCoincidence", "=", 
           RowBox[{"t0", "+", 
            RowBox[{"Range", "[", 
             RowBox[{"0.0", ",", "tMax", ",", "tC"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"firstCoincidenceState", "=", 
           RowBox[{"origTrace", "[", "t0", "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"calculatedOrders", "=", "selectedOrders"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"numSelectedOrders", "=", 
           RowBox[{"Length", "[", "calculatedOrders", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "calculate", " ", "the", " ", "starting", " ", "positions", " ", 
            "of", " ", "the", " ", "approximate", " ", "trajectories", " ", 
            "using", " ", "the", " ", "jump", " ", "operators"}], " ", "*)"}],
           "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"selectedJmpOperators", "=", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "/.", "pms"}], ")"}], " ", "*", "ones2"}], 
                    "&"}], "/@", 
                   RowBox[{"jmpList", "[", 
                    RowBox[{"[", "selectedH1Index", "]"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"HA", "\[Rule]", "0"}], ",", 
                   RowBox[{"HB", "\[Rule]", "H1"}]}], "}"}]}], "/.", "vals"}],
                "/.", "H1Dsubs"}], "/.", 
              RowBox[{"{", 
               RowBox[{"H1", "\[Rule]", "H1func"}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"MatrixForm", "/@", "selectedJmpOperators"}], "]"}], 
              ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"jmpFuncs", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"t", ",", "\[Alpha]0", ",", "\[Alpha]j"}], "}"}], 
                   ",", "func"}], "]"}], "/.", 
                 RowBox[{"func", "\[Rule]", "#"}]}], "&"}], ")"}], "/@", 
              "selectedJmpOperators"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"approx\[Psi]0", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{"jmpFraction", ",", 
                 RowBox[{
                  RowBox[{"MatrixExp", "[", 
                   RowBox[{"jmpFraction", "*", 
                    RowBox[{
                    RowBox[{"jmpFuncs", "[", 
                    RowBox[{"[", " ", 
                    RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}], "[", 
                    RowBox[{"0", ",", "\[Alpha]0", ",", "0"}], "]"}]}], "]"}],
                   ".", "\[Psi]0"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}]}], 
            ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"approxTraces", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"\[Psi]", "/.", 
              RowBox[{"NTrajectory", "[", 
               RowBox[{
                RowBox[{"GetHFunc", "[", 
                 RowBox[{
                  RowBox[{"ApproxHList", "[", 
                   RowBox[{"[", " ", 
                    RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}], ",", 
                  "H1func", ",", "vals"}], "]"}], ",", "tMax", ",", 
                "\[Alpha]0", ",", "firstCoincidenceState", ",", "t0"}], 
               "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Omg1", "[", "t0_", "]"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", "tC", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"H1", "[", "t0", "]"}], "/", "4"}], "*", "sx"}], 
                 "+", " ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"H1", "'"}], "[", "t0", "]"}], "/", " ", 
                   RowBox[{"(", 
                    RowBox[{"8", " ", "ww"}], ")"}]}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Pi", " ", "sx"}], " ", "+", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"2", "ww", " ", "t0"}], "]"}], "sx"}], "+", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"2", " ", "ww", " ", "t0"}], "]"}], "sy"}]}], 
                   ")"}]}]}], ")"}]}], "/.", "vals"}], "/.", "pms"}], "/.", 
            RowBox[{"{", 
             RowBox[{"H1", "\[Rule]", "H1func"}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"coolStates", "=", 
           RowBox[{"FoldList", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"MatrixExp", "[", 
                RowBox[{"Omg1", "[", "#2", "]"}], "]"}], ".", "#1"}], "&"}], 
             ",", "firstCoincidenceState", ",", "tCoincidence"}], "]"}]}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Let", "'"}], "s", " ", "get", " ", 
            RowBox[{
             RowBox[{"plottin", "'"}], "!"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"relevantTCoincidence", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"tCoincidence", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"#", "<", 
                  RowBox[{"tM", "*", "tMax"}]}], "&"}], ")"}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"\[Alpha]f", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{
                   RowBox[{"tM", "*", "tMax"}], ",", "tC"}], "]"}], "*", 
                 "ww"}], "/.", "vals"}]}], ";"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "minus", " ", "sign", " ", "because", " ", "jumps", " ", "are", 
              " ", "defined", " ", "from", " ", "real", " ", "trajectory", 
              " ", "to", " ", "the", " ", "effective", " ", "trajectory"}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"finalJumps", "=", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{"jmpFraction", ",", 
                   RowBox[{"MatrixExp", "[", 
                    RowBox[{
                    RowBox[{"-", "jmpFraction"}], "*", 
                    RowBox[{
                    RowBox[{"jmpFuncs", "[", 
                    RowBox[{"[", " ", 
                    RowBox[{"calculatedOrders", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], " ", "]"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"tM", "*", "tMax"}], ",", "\[Alpha]0", ",", 
                    "\[Alpha]f"}], "]"}]}], "]"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "numSelectedOrders"}], "}"}]}], "]"}]}], 
              ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"selectedPlots", "=", 
               RowBox[{"Pick", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "plotExprs", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"selplots", "[", "1", "]"}], ",", 
                    RowBox[{"selplots", "[", "2", "]"}], ",", 
                    RowBox[{"selplots", "[", "3", "]"}], ",", 
                    RowBox[{"selplots", "[", "4", "]"}]}], "}"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ";;", 
                    RowBox[{"Length", "[", "plotExprs", "]"}]}], "]"}], "]"}],
                  ",", "1"}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Grid", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"ReleaseHold", "[", 
                  RowBox[{"plotExprs", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "selectedPlots"}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"StringForm", "[", 
                 RowBox[{
                 "\"\<\!\(\*SubscriptBox[\(t\), \(gate\)]\) = ``\>\"", ",", 
                  " ", 
                  RowBox[{"NumberForm", "[", 
                   RowBox[{"tMax", ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "2"}], "}"}]}], "]"}]}], "]"}], "}"}]}],
               "}"}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "tM", ",", " ", "0.01", ",", 
             "\"\<Time t / \!\(\*SubscriptBox[\(t\), \(gate\)]\)\>\""}], 
            "}"}], ",", "0.01", ",", "1.0", ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
           RowBox[{"AnimationRate", "\[Rule]", ".03"}], ",", 
           RowBox[{"RefreshRate", "\[Rule]", ".005"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\[Alpha]0", ",", "0.0", ",", "\"\<Offset \[Alpha]0\>\""}], "}"}],
            ",", "0.0", ",", " ", "Pi", ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "H1avg", ",", " ", "0.2", ",", 
             "\"\<Average drive strength H1_avg\>\""}], "}"}], ",", "0.01", 
           ",", "2.0", ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "upToOrder", ",", "1", ",", 
               "\"\<Include Magnus expansion up to order\>\""}], "}"}], ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "ApproxHList", "]"}], "-", "1"}], ",", 
             "1", ",", 
             RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}], 
           ","}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"selectedOrders", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             "\"\<Show Magnus orders\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "\[Rule]", 
               RowBox[{"Graphics", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Text", "[", 
                    RowBox[{"#", "-", "1"}], "]"}], ",", 
                   RowBox[{"EdgeForm", "[", "Thin", "]"}], ",", 
                   RowBox[{"approxColors", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "0.5"}]}], "}"}], "]"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"30", ",", "12"}], "}"}]}]}], "]"}]}], ")"}], 
             "&"}], "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"1", ",", 
              RowBox[{"Length", "[", "ApproxHList", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"ControlType", "\[Rule]", "CheckboxBar"}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "wwIn", ",", "1.0", ",", "\"\<Drive frequency \[Omega]\>\""}], 
            "}"}], ",", "0.01", ",", "2.0"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "DeltaIn", ",", "0.0", ",", 
             "\"\<Qubit detuning \[CapitalDelta]\>\""}], "}"}], ",", 
           RowBox[{"-", "1.0"}], ",", "1.0"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "phiIn", ",", "0.0", ",", "\"\<Rotation axis angle \[Phi]\>\""}], 
            "}"}], ",", 
           RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"selectedPlots", ",", 
             RowBox[{"Pick", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", "plotExprs", "]"}], "]"}], ",", 
               RowBox[{"plotExprs", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "3"}], "]"}], "]"}], ",", "1"}], "]"}], 
             ",", "\"\<Visualizations\>\""}], "}"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"i", "\[Rule]", 
              RowBox[{"plotExprs", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "2"}], "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "plotExprs", "]"}]}], "}"}]}], "]"}], 
           ",", 
           RowBox[{"ControlType", "\[Rule]", "CheckboxBar"}]}], "}"}]}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"selplots", "[", "i", "]"}], ",", 
                 RowBox[{"plotExprs", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", 
                 RowBox[{"plotExprs", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "plotExprs", "]"}]}], "}"}]}], "]"}]}], 
          "]"}], "*)"}], "\[IndentingNewLine]", "]"}]}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.720349299127124*^9, 3.720349338149681*^9}, {
   3.720349478941538*^9, 3.7203495598621273`*^9}, {3.720349817696536*^9, 
   3.7203499678848886`*^9}, {3.720350043493881*^9, 3.720350060925932*^9}, {
   3.7203501344568367`*^9, 3.720350138578557*^9}, {3.7203502617824078`*^9, 
   3.72035034671142*^9}, {3.7203545357709427`*^9, 3.7203545764962263`*^9}, {
   3.720354836996895*^9, 3.720355097484405*^9}, 3.720355260675953*^9, {
   3.7203553217548532`*^9, 3.720355391386819*^9}, {3.720355431421301*^9, 
   3.7203555195771217`*^9}, {3.720355676095797*^9, 3.7203557106301613`*^9}, {
   3.7203558735766077`*^9, 3.720355875562792*^9}, {3.720355909045388*^9, 
   3.720355936774487*^9}, {3.720355973648233*^9, 3.720355976247266*^9}, {
   3.720356580133671*^9, 3.720356685788978*^9}, {3.720356758993224*^9, 
   3.720356778205873*^9}, {3.720356820963797*^9, 3.720356824347335*^9}, {
   3.720356862222742*^9, 3.72035695355239*^9}, {3.720357074386897*^9, 
   3.720357128171701*^9}, {3.720357196568652*^9, 3.7203572437036448`*^9}, {
   3.72035767462002*^9, 3.720357676933795*^9}, {3.7204167171578503`*^9, 
   3.7204168090083113`*^9}, {3.720416863690905*^9, 3.720416970664596*^9}, {
   3.720417087468534*^9, 3.720417280077005*^9}, {3.7204173409015503`*^9, 
   3.7204174045789757`*^9}, {3.720417876164535*^9, 3.720417881689611*^9}, {
   3.7204331855001373`*^9, 3.720433197760211*^9}, {3.7204333954557858`*^9, 
   3.720433396014113*^9}, {3.720438271155867*^9, 3.720438286607758*^9}, {
   3.720438365375224*^9, 3.7204383956050987`*^9}, {3.720439038000201*^9, 
   3.720439041807666*^9}, {3.7204390911541023`*^9, 3.720439111619898*^9}, {
   3.720439245517983*^9, 3.720439300383903*^9}, {3.7204393548640747`*^9, 
   3.720439362766941*^9}, {3.7204396219577093`*^9, 3.720439626845045*^9}, 
   3.720439788131686*^9, {3.720439821666958*^9, 3.7204398384104967`*^9}, {
   3.720440043883354*^9, 3.720440052023467*^9}, {3.720440092882688*^9, 
   3.720440117236165*^9}, {3.7204401499661837`*^9, 3.720440150867346*^9}, {
   3.720440191472412*^9, 3.720440246637135*^9}, {3.720440286790915*^9, 
   3.720440290239402*^9}, 3.7204403300419683`*^9, {3.7204403715737877`*^9, 
   3.720440384044261*^9}, {3.720440425212141*^9, 3.720440425795039*^9}, {
   3.7204406417152042`*^9, 3.720440643665909*^9}, {3.720440723046317*^9, 
   3.720440809702422*^9}, {3.7204409554437923`*^9, 3.7204409880526*^9}, {
   3.720441035955605*^9, 3.720441044230165*^9}, 3.72044109572644*^9, {
   3.72044128697493*^9, 3.720441287421446*^9}, {3.720441911426277*^9, 
   3.720441928753602*^9}, 3.7204421078645763`*^9, {3.7205020618102417`*^9, 
   3.720502061999702*^9}, {3.720503823520789*^9, 3.720503828270088*^9}, {
   3.7205043201587343`*^9, 3.720504522123054*^9}, {3.72050455324612*^9, 
   3.720504595734074*^9}, {3.720504633274888*^9, 3.7205046661842833`*^9}, {
   3.72050476156581*^9, 3.720504860553863*^9}, {3.720504919673787*^9, 
   3.720504920080515*^9}, {3.7205060010845947`*^9, 3.720506065348461*^9}, 
   3.720506307741461*^9, {3.720510979556518*^9, 3.720511100781433*^9}, {
   3.720511180273054*^9, 3.720511208352579*^9}, {3.720511702905122*^9, 
   3.72051170472011*^9}, {3.720516432362967*^9, 3.720516485451816*^9}, {
   3.720516857019567*^9, 3.7205168574962482`*^9}, {3.720517980628001*^9, 
   3.720518030948935*^9}, {3.720876178967882*^9, 3.7208761800477753`*^9}, {
   3.721035834766047*^9, 3.7210358543486633`*^9}, {3.721035885414723*^9, 
   3.721035893848558*^9}, {3.7210364193223057`*^9, 3.721036444282015*^9}, {
   3.721036729187065*^9, 3.721036772370666*^9}, {3.721038667627315*^9, 
   3.721038669329207*^9}, {3.72103874183683*^9, 3.721038744443962*^9}, {
   3.7210387991895027`*^9, 3.721038858583577*^9}, {3.72104033584103*^9, 
   3.721040380938089*^9}, {3.721041909642344*^9, 3.7210419587547407`*^9}, {
   3.721041993494297*^9, 3.721042033749297*^9}, {3.721042092328164*^9, 
   3.721042106607692*^9}, {3.721042247518446*^9, 3.7210422615970383`*^9}, {
   3.7210423454407187`*^9, 3.7210423488959427`*^9}, {3.721048778755556*^9, 
   3.721048918885989*^9}, {3.721049007667337*^9, 3.7210491646157217`*^9}, {
   3.721049259754127*^9, 3.721049281785633*^9}, {3.721049530031056*^9, 
   3.721049548364707*^9}, 3.721049664122471*^9, {3.72105355714032*^9, 
   3.7210535583094673`*^9}, {3.7211238771834993`*^9, 3.721123911999345*^9}, {
   3.7211239639826603`*^9, 3.721123965636301*^9}, {3.721630868658037*^9, 
   3.7216308691136827`*^9}, {3.721631192299694*^9, 3.721631236419269*^9}, {
   3.7216312742107983`*^9, 3.72163128267703*^9}, {3.721631555378398*^9, 
   3.721631559382001*^9}, {3.721631621105604*^9, 3.721631668839635*^9}, {
   3.721632055416669*^9, 3.7216320912956467`*^9}, {3.7216321776177053`*^9, 
   3.7216321977237873`*^9}, {3.721633206067045*^9, 3.721633240457958*^9}, {
   3.721633276586855*^9, 3.721633545156734*^9}, {3.721633635368648*^9, 
   3.7216337104843273`*^9}, {3.721633745749597*^9, 3.72163376594*^9}, {
   3.721633922970571*^9, 3.721633960080882*^9}, {3.721634017292276*^9, 
   3.7216340277752113`*^9}, {3.721634270741811*^9, 3.721634273084779*^9}, {
   3.721634304969249*^9, 3.721634305548243*^9}, {3.721634423731537*^9, 
   3.721634440275836*^9}, {3.7216345698789787`*^9, 3.7216345720452137`*^9}, {
   3.721634732396641*^9, 3.721634750202703*^9}, {3.7216348728001633`*^9, 
   3.721634875609084*^9}, {3.7216349625307837`*^9, 3.721634963235643*^9}, {
   3.72164390160494*^9, 3.721643904668301*^9}, {3.7216500161942577`*^9, 
   3.7216500424898357`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["The final plot!", "Section",
 CellChangeTimes->{{3.720349571021181*^9, 3.7203495810279293`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InteractiveTrajectoryPlotting", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Bloch3DPlotter", ",", "\"\<3D\>\"", ",", "1"}], "}"}], ",", " ",
     "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
     "BlochAnglePlotter", ",", "\"\<Cartesian Bloch angle\>\"", ",", "0"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"BlochMercatorPlotter", ",", "\"\<Mercator\>\"", ",", "0"}], 
     "}"}]}], "\[IndentingNewLine]", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7203495969029007`*^9, 3.720349646558012*^9}, {
   3.7203553974281397`*^9, 3.720355417289392*^9}, {3.720357054369513*^9, 
   3.7203570667768917`*^9}, {3.720357149726101*^9, 3.720357154276394*^9}, {
   3.720357505089733*^9, 3.72035753003902*^9}, {3.720357679173058*^9, 
   3.72035768248389*^9}, {3.72035826940269*^9, 3.720358270887439*^9}, {
   3.7204167455022297`*^9, 3.72041675968716*^9}, 3.7204400971983337`*^9, {
   3.720504530316079*^9, 3.720504534626072*^9}, {3.720505763220057*^9, 
   3.720505766040083*^9}, {3.720516467328878*^9, 3.720516467773799*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`origTrace$$ = 
  InterpolatingFunction[{{0., 11.635528346628861`}}, {
   5, 3, 1, {110}, {4}, 0, 0, 0, 0, Automatic, {}, {}, False}, CompressedData["
1:eJxFiA1Q03Uch7dhmzCwveCA0Rhjb5docYgCKvy+CAMW8NcbGY3BwhFOsEsB
dwjyeqKe0jKuhoxX4Zoz9QaReHkiCBwpQiAuaHiUzhGTlAG6YDnQuou7nrvP
Pfd5OIrDkiwCDofD/7vPcf9zN7jXYjSL0H/et+YsxJi5/6c8+8jaV6HD7mKl
lv/1Wr+A7KJVziLSI6PuXekJhgEtpc1pCpdvoIqXrT2m3D50OmzPNbv1DlKX
OC9R5D8jsdmIMXLGUC7ulixGMY607IsH81InUW/kOdUFyW/or/d2RSl1j9GZ
7va40pYniIXxMU3jNNqMUanJwVa0E1s1Uu7Mog+w2ZoR2XMkxcalXyzYUIg+
Y4OubwHt0k/Mu3i8QNH6xDFFyktEGNrJCntqR722TdkehUuojMbsfOLqQJHb
XfE/1v2NVqWORHWgE90ssdYqulZQUcvEdGjSaxQ+MBDk8fsbJKEnfj9jwgEp
Ztu9n/rw0HXUz3LxKgFydaSVUzUuIJxY8FSWr4Mp4sMtcTlvQXVof6zwQyLE
Hrz6CSmSBCu1mmNW4XpoM/e/TglxBcWmF5V3wQ0Y+f7k8CQyDN7Eqr+TukPx
uhIv5gEPCEq60ng2bwNYNJNcZ+nbkDDvMt4pooCO7uttG6LAm9BgmUBChY/T
xE1yExU6yjPMNXIauOsKeKPTNMga/FJJOkSHnjndZbRIBx/arbmCAk/I2/5L
UPuqJwynPst/emIj7JeeI2i9GLCUsrVafIUBVR/9yn4V6QWcfccNlx94wfVk
doTsgDckSPqHyK+84fFeZWqX2gdUe8izn3GY4Ia1FbA6mdCcmEwcifeFkITl
b0qnfGFQXM99/8g7II9HHY9cWGCPtcBX51lwRnR6FAL9wC8mUL7Y7Qc/7B59
3iJhQ3xU/nHJDBtszeST+Ah/CG9OH5485Q+VTW30jvv+MNKIl51lcsCnMblV
8SkHMht0szsMHDDULwfRHRxw1ImPPYsKgOi6+p7+qgBQa+eIDeMBYKpF2FE2
F+y0DJ+iNC5Q1OXTZVouBJJa2k5OcCGuoreois6DTKdZVL2XB2UqAvW8mgf1
8wFTDfd4cD07Wt9K4sMDS2bepRg+2NIrIwwVfHAzfbv+WjcfBJIB4w0nH6KG
/2jqCRNAeiwxZ0AlgMLbgm1DHQLQ7IjDjc0LwEkpLq5jCmG/td2RKRLCP9nR
hjE=
   "], {{{1., 0.}, {0., 
    0.}}, {{Complex[0.9999999999999996, 0.], 
     Complex[-1.3820605171925774`*^-11, -2.06960349745205*^-8]}, {
     Complex[-6.414084054571454*^-13, 0.], 
     Complex[-2.0696038050940768`*^-8, -0.00003099183588619904]}}, {{Complex[
     0.999999999999997, -5.720632009064602*^-19], 
     Complex[-6.910297655398038*^-11, -6.208804954802286*^-8]}, {
     Complex[-3.848445856235052*^-12, -8.566514726542439*^-16], 
     Complex[-8.278407836968962*^-8, -0.00006198358884880387]}}, {{Complex[
     0.999999999999979, -1.37294729432406*^-17], 
     Complex[-3.455140445749314*^-10, -1.862636502652078*^-7]}, {
     Complex[-2.3090569877935963`*^-11, -1.8846266691328203`*^-14], 
     Complex[-3.311351321351615*^-7, -0.00012396651431033218`]}}, {{Complex[
     0.9999999999999147, -8.981321946683968*^-17], 
     Complex[-1.064179350324817*^-9, -3.932215081213729*^-7]}, {
     Complex[-7.311959029464947*^-11, -9.508739203941523*^-14], 
     Complex[-7.450496172782484*^-7, -0.00018594811300519208`]}}, {{Complex[
     0.9999999999997528, -3.523859459540288*^-16], 
     Complex[-2.4462181238296814`*^-9, -6.82959408126227*^-7]}, {
     Complex[-1.6932781005021704`*^-10, -2.9810922062099266`*^-13], 
     Complex[-1.3245216271440864`*^-6, -0.00024792772156975544`]}}, {{Complex[
     0.9999999999606679, -2.4790345963389704`*^-13], 
     Complex[-1.002753019808351*^-7, -8.131857267823608*^-6]}, {
     Complex[-7.0557561728056016`*^-9, -4.492865447903851*^-11], 
     Complex[-0.000016221917038428138`, -0.0008674684370969]}}, {{Complex[
     0.9999999997006634, -2.7673869774774773`*^-12], 
     Complex[-5.084128714328356*^-7, -0.00002384965493007106]}, {
     Complex[-3.5466742119450684`*^-8, -3.809180020571918*^-10], 
     Complex[-0.00004765103070043138, -0.0014860808600584289`]}}, {{Complex[
     0.9999999988322945, -1.461180998363826*^-11], 
     Complex[-1.446458857278147*^-6, -0.00004781963286199041]}, {
     Complex[-1.007078530242099*^-7, -1.5279270182844459`*^-9], 
     Complex[-0.00009556700632934624, -0.0021031031219324505`]}}, {{Complex[
     0.9999999967620664, -5.1590072717541844`*^-11], 
     Complex[-3.134177857788708*^-6, -0.00008001614381817582]}, {
     Complex[-2.1797505664978786`*^-7, -4.276392021659199*^-9], 
     Complex[-0.00015990143760972626`, -0.0027178752438916107`]}}, {{Complex[
     0.999999971590956, -7.926393338252686*^-10], 
     Complex[-0.000016074822686280877`, -0.0002375353027129472]}, {
     Complex[-1.1143401671536833`*^-6, -3.774825807204348*^-8], 
     Complex[-0.00047421825266379016`, -0.004659169176052659]}}, {{Complex[
     0.9999998853164074, -4.465561922629975*^-9], 
     Complex[-0.00004589982908335305, -0.000476881673233787]}, {
     Complex[-3.1670464465532955`*^-6, -1.525952829775294*^-7], 
     Complex[-0.0009503920642584329, -0.006549681871304047]}}, {{Complex[
     0.9999996788318772, -1.6112719938223694`*^-8], 
     Complex[-0.00009937458250897492, -0.0007954364113096837]}, {
     Complex[-6.814081977428789*^-6, -4.2629378136423157`*^-7], 
     Complex[-0.0015814577903541295`, -0.008368894083325945]}}, {{Complex[
     0.9999992757261161, -4.456077474947294*^-8], 
     Complex[-0.0001829186336891017, -0.0011897393113903902`]}, {
     Complex[-0.000012444338776171195`, -9.586207866328167*^-7], 
     Complex[-0.002358145372449236, -0.010097153953925105`]}}, {{Complex[
     0.9999985841635748, -1.0330591400401396`*^-7], 
     Complex[-0.00030250809904156623`, -0.0016555097692126134`]}, {
     Complex[-0.00002038474075958019, -1.8676703921863783`*^-6], 
     Complex[-0.003268981163151626, -0.01171591904246658]}}, {{Complex[
     0.9999968482805278, -2.827453055472935*^-7], 
     Complex[-0.0005516607973259828, -0.0024495107251696615`]}, {
     Complex[-0.0000365485846202685, -4.133070598837186*^-6], 
     Complex[-0.004803977463848139, -0.01383880539521863]}}, {{Complex[
     0.9999939291137232, -6.469832519451265*^-7], 
     Complex[-0.0009026822864119592, -0.003365649870384131]}, {
     Complex[-0.000058572047864445474`, -7.902406340853971*^-6], 
     Complex[-0.006544678036647398, -0.01564747501180173]}}, {{Complex[
     0.99998946027009, -1.3027042960547403`*^-6], 
     Complex[-0.0013666037716632082`, -0.0043832064537386315`]}, {
     Complex[-0.00008649555908058129, -0.000013598323961849132`], 
     Complex[-0.008434873401147269, -0.01710334676214372]}}, {{Complex[
     0.9999830858779136, -2.381255505495896*^-6], 
     Complex[-0.0019507980676933794`, -0.005479337563743161]}, {
     Complex[-0.00011991298222910469`, -0.000021592132818996042`], 
     Complex[-0.010412210658937894`, -0.018177157549248472`]}}, {{Complex[
     0.9999744894861434, -4.03427800394562*^-6], 
     Complex[-0.002658612077592749, -0.006629700972665891]}, {
     Complex[-0.00015796557394346847`, -0.00003215808017990422], 
     Complex[-0.012409663964684813`, -0.018849859510964767`]}}, {{Complex[
     0.9999634215728018, -6.4262430198388556`*^-6], 
     Complex[-0.003489131003080346, -0.007809108152568239]}, {
     Complex[-0.00019935926396854925`, -0.00004542796531993965], 
     Complex[-0.014357128624965913`, -0.019113293640054627`]}}, {{Complex[
     0.9999450873677604, -0.000010916159730635996`], 
     Complex[-0.0047434210254685815`, -0.009344650204264046]}, {
     Complex[-0.00025536660805575964`, -0.00006661604236892774], 
     Complex[-0.01669727372612455, -0.018850321293583595`]}}, {{Complex[
     0.9999222737150056, -0.000017274666050859405`], 
     Complex[-0.006172915991389235, -0.010832427129431877`]}, {
     Complex[-0.0003096219595886795, -0.00009158333669215416], 
     Complex[-0.01867629771796857, -0.017937724623208334`]}}, {{Complex[
     0.9998953254511771, -0.000025754588651564482`], 
     Complex[-0.0077424530842489245`, -0.012222593194891595`]}, {
     Complex[-0.00035700739326199557`, -0.00011892341024667094`], 
     Complex[-0.020146010048117276`, -0.01644392641985192]}}, {{Complex[
     0.9998650107574877, -0.000036464923771158345`], 
     Complex[-0.009405420708672492, -0.013472069669512378`]}, {
     Complex[-0.0003922244022443552, -0.00014646488593089092`], 
     Complex[-0.020972100076668988`, -0.014468058412825746`]}}, {{Complex[
     0.999832516053808, -0.00004930920359625889], 
     Complex[-0.01110513701212777, -0.014546918743027328`]}, {
     Complex[-0.0004102877068958154, -0.0001712935721615], 
     Complex[-0.02104012624063927, -0.012137076061728657`]}}, {{Complex[
     0.9997993992327788, -0.00006392881801416774], 
     Complex[-0.01277667585331844, -0.015424433957885118`]}, {
     Complex[-0.00040706233375564554`, -0.0001898465719652017], 
     Complex[-0.020260902669083376`, -0.00960174970138775]}}, {{Complex[
     0.9997674989113376, -0.00007965705074301924], 
     Complex[-0.014349093300590149`, -0.016094864694596665`]}, {
     Complex[-0.00037981318477619717`, -0.00019808129831052932`], 
     Complex[-0.018575079305941797`, -0.007031656080029933]}}, {{Complex[
     0.999733282895726, -0.00009875769945684442], 
     Complex[-0.016016705775585675`, -0.01663784662616998]}, {
     Complex[-0.0003135148595362223, -0.0001880644693585834], 
     Complex[-0.015277892589663711`, -0.004129810666460357]}}, {{Complex[
     0.9997072223653369, -0.00011552058435279362`], 
     Complex[-0.01729528609111124, -0.016921265660144406`]}, {
     Complex[-0.00021418951735218848`, -0.00014913592265665515`], 
     Complex[-0.010635014783321467`, -0.0017831973409532405`]}}, {{Complex[
     0.9996921358671683, -0.0001267953123919191], 
     Complex[-0.018057640073371316`, -0.017015858181695303`]}, {
     Complex[-0.00009137174261906935, -0.00007500181065500724], 
     Complex[-0.004751816445341365, -0.0003248447148261394]}}, {{Complex[
     0.9996895835199585, -0.0001289143925568091], 
     Complex[-0.018190787461788687`, -0.01702398087322521]}, {Complex[
     0.00003870167281228402, 0.000038420554419096124`], Complex[
     0.00218722851119214, -0.00006477349650022538]}}, {{Complex[
     0.9996992046043018, -0.00011796418107949134`], 
     Complex[-0.017603463259078158`, -0.01707645686396699]}, {Complex[
     0.00015304960800968935`, 0.00019189515086061583`], Complex[
     0.009924076837324209, -0.0012717619078386796`]}}, {{Complex[
     0.9997180789534988, -0.00009016163577594763], 
     Complex[-0.016232879238777795`, -0.017327698937558946`]}, {Complex[
     0.00022248517675615065`, 0.00038182682114747254`], Complex[
     0.01813669259011653, -0.0041565076542136176`]}}, {{Complex[
     0.9997401709771891, -0.00004232528515539729], 
     Complex[-0.0140503655084174, -0.017949291044132946`]}, {Complex[
     0.00021276723916783857`, 0.0005993917555443644], Complex[
     0.026452303436430274`, -0.008857059860070984]}}, {{Complex[
     0.9997559161165981, 0.00002758139866203049], 
     Complex[-0.011065556639572151`, -0.019122288060034118`]}, {Complex[
     0.00008635396275433648, 0.000829943291907667], Complex[
     0.034463796655201766`, -0.015427302258467735`]}}, {{Complex[
     0.9997482936603258, 0.00013735035883796935`], 
     Complex[-0.006637630648835156, -0.021430655018946997`]}, {
     Complex[-0.00026008362072873933`, 0.0010874581568312252`], Complex[
     0.04286428245206334, -0.025402213210346438`]}}, {{Complex[
     0.9996862563856329, 0.00027392455068367465`], 
     Complex[-0.0013384714579782108`, -0.02501044938658663]}, {
     Complex[-0.0008756722657088979, 0.001291451528605738], Complex[
     0.04961538103451815, -0.037642367991129994`]}}, {{Complex[
     0.9995362019450675, 0.00042830841359944524`], Complex[
     0.004608283250001159, -0.030099189839761162`]}, {
     Complex[-0.0018083994179545486`, 0.0013901292316342395`], Complex[
     0.05411218064317064, -0.05174893521212287]}}, {{Complex[
     0.9992599326988943, 0.0005852171619349401], Complex[
     0.010915202145673823`, -0.03687956703478209]}, {
     Complex[-0.003089649584207867, 0.0013257699972145944`], Complex[
     0.055849500531949, -0.06716398216334976]}}, {{Complex[0.9988169198027042,
      0.0007226391262158799], Complex[
     0.0172448223507401, -0.04546266719907353]}, {
     Complex[-0.004727884419697713, 0.0010391161602285397`], Complex[
     0.05446259938010936, -0.08319666283596552]}}, {{Complex[
     0.9981672313234876, 0.0008119654843504315], Complex[
     0.02322770163887311, -0.05587479162129786]}, {
     Complex[-0.006703455086531715, 0.00047488385872526684`], Complex[
     0.04976106456194617, -0.09905984956607349]}}, {{Complex[
     0.9972749557396775, 0.0008187981981797076], Complex[
     0.028483822830116287`, -0.06804897923347816]}, {
     Complex[-0.008965217107298352, -0.00041194278624329946`], Complex[
     0.04175328218830356, -0.11391545892733562`]}}, {{Complex[
     0.9961118804797781, 0.0007044994387250283], Complex[
     0.03264615026900665, -0.08182208662347176]}, {
     Complex[-0.01142953925127418, -0.001649504197622064], Complex[
     0.0306593020754134, -0.12692604354101203`]}}, {{Complex[
     0.9946611247823194, 0.0004284863565338174], Complex[
     0.0353849132487834, -0.09693797647221325]}, {
     Complex[-0.013982153186899014`, -0.0032427223967235576`], Complex[
     0.016910506768477607`, -0.13730962157354515`]}}, {{Complex[
     0.9926391924841483, -0.00013861881894581697`], Complex[
     0.03642952217143853, -0.11550024336246636`]}, {
     Complex[-0.016838882978223526`, -0.005477560891704457], 
     Complex[-0.0013214928850880474`, -0.14512798228034993`]}}, {{Complex[
     0.9902602850096833, -0.0010227031362380716`], Complex[
     0.03497507799399346, -0.1347600460035234]}, {
     Complex[-0.019387741486281578`, -0.008059620376477051], 
     Complex[-0.020997896083729938`, -0.1478559222916335]}}, {{Complex[
     0.9875810450853268, -0.0022602136932150184`], Complex[
     0.030924092368139745`, -0.15402038205208132`]}, {
     Complex[-0.02138081881494345, -0.010840789766414284`], 
     Complex[-0.04069100740880597, -0.14510496010146778`]}}, {{Complex[
     0.9846897586357921, -0.0038644449081812154`], Complex[
     0.024374138271350515`, -0.17256029752572571`]}, {
     Complex[-0.02258786661867141, -0.01361700388274572], 
     Complex[-0.05887144210191898, -0.13690495331674904`]}}, {{Complex[
     0.981702166651812, -0.005818789018419453], Complex[
     0.015623326926214749`, -0.18969164906885608`]}, {
     Complex[-0.022825053260526116`, -0.01613832277813518], 
     Complex[-0.07402963863114208, -0.12372757654926306`]}}, {{Complex[
     0.978753509172438, -0.008071758069946781], Complex[
     0.005159442018131752, -0.2048165276997859]}, {
     Complex[-0.02198317418747714, -0.018125812607481882`], 
     Complex[-0.08480178322145338, -0.10647251893330865`]}}, {{Complex[
     0.9759870785614986, -0.010534623574247112`], 
     Complex[-0.006367100667383363, -0.21748039202956396`]}, {
     Complex[-0.02005218577893384, -0.01929440761320761], 
     Complex[-0.09008883363695946, -0.08641611353630414]}}, {{Complex[
     0.9735399652425936, -0.013082363473855576`], 
     Complex[-0.018184842128696622`, -0.2274161759376956]}, {
     Complex[-0.017139030924818312`, -0.019380195484593812`], 
     Complex[-0.08915776198505608, -0.06512585543929175]}}, {{Complex[
     0.9715270519721362, -0.015558359990550965`], 
     Complex[-0.029454459004059127`, -0.2345753127288126]}, {
     Complex[-0.013476155225902547`, -0.01816996654902691], 
     Complex[-0.08171582984628749, -0.04434762892521614]}}, {{Complex[
     0.9700246101304992, -0.01778298052950353], 
     Complex[-0.039329538469293795`, -0.2391426888107328]}, {
     Complex[-0.00941881794929366, -0.015530464727962979`], 
     Complex[-0.06795139107111015, -0.02587497213104945]}}, {{Complex[
     0.9690550430162354, -0.019565823709855643`], 
     Complex[-0.047020310295094084`, -0.2415338643914915]}, {
     Complex[-0.005430191364607805, -0.011434601924639165`], 
     Complex[-0.04853794116586587, -0.011411061846785838`]}}, {{Complex[
     0.96857438946508, -0.020721054025877296`], 
     Complex[-0.05185548252605644, -0.24237432113414803`]}, {
     Complex[-0.0020542219027098133`, -0.005981933830395011], 
     Complex[-0.02460137877622635, -0.002434244603090375]}}, {{Complex[
     0.9684641391834684, -0.02108490654769358], 
     Complex[-0.053337513706494054`, -0.2424618674885274]}, {Complex[
     0.00012277804220038897`, 0.0005890946073716875], Complex[
     0.002346742380176011, -0.0000770606852375501]}}, {{Complex[
     0.9685287202408787, -0.020534137712460654`], 
     Complex[-0.05118716481574205, -0.24271454024530736`]}, {Complex[
     0.0005198682391869764, 0.007899282007619753], Complex[
     0.03050509467160172, -0.005027168663547706]}}, {{Complex[
     0.9684997031845218, -0.01900394555937647], 
     Complex[-0.045373908761917006`, -0.24410732670159999`]}, {
     Complex[-0.0013843277647387683`, 0.015438869495117014`], Complex[
     0.057901374347042865`, -0.017456797348607132`]}}, {{Complex[
     0.9680473294951281, -0.01650369895467296], 
     Complex[-0.036129644864786835`, -0.2476017876042096]}, {
     Complex[-0.005994759390152617, 0.022590895723268063`], Complex[
     0.08252703605355488, -0.036985664506681684`]}}, {{Complex[
     0.9667994196208882, -0.013128721946595727`], 
     Complex[-0.023944114801770607`, -0.2540732106950498]}, {
     Complex[-0.013545049287841974`, 0.028668004813764733`], Complex[
     0.10248047698642765`, -0.06268084812094774]}}, {{Complex[
     0.9643670587072459, -0.009066406592575982], 
     Complex[-0.009541433321753114, -0.2642402949844459]}, {
     Complex[-0.02404991685901924, 0.032961946513747224`], Complex[
     0.11611061049060621`, -0.09309577709432588]}}, {{Complex[
     0.9598758808196304, -0.0041370925859326915`], Complex[
     0.007769655266384121, -0.2802870039036079]}, {
     Complex[-0.03873020775750403, 0.03483001950882643], Complex[
     0.12230483291149706`, -0.12975992584704174`]}}, {{Complex[
     0.9530700115824692, 0.0008019834187437542], Complex[
     0.025248586743126036`, -0.30169424420037333`]}, {
     Complex[-0.055999294132183824`, 0.03299306798824082], Complex[
     0.11834477207135131`, -0.16691319338816774`]}}, {{Complex[
     0.9436490591181376, 0.005178518050426993], Complex[
     0.041412280678904775`, -0.3283057440368341]}, {
     Complex[-0.07478598144073163, 0.026978048064520886`], Complex[
     0.1041267541037271, -0.20139729421210997`]}}, {{Complex[
     0.931490799095721, 0.008377130747307091], Complex[
     0.05483013094643472, -0.35951130902854617`]}, {
     Complex[-0.09370565537697978, 0.01667519471709043], Complex[
     0.080486091042737, -0.23012684378508355`]}}, {{Complex[
     0.9166888259313614, 0.009797318343210784], Complex[
     0.06425891897908619, -0.3942796156180786]}, {
     Complex[-0.11117266817748364`, 0.0024095196379340933`], Complex[
     0.04917410990218419, -0.2503991005595415]}}, {{Complex[0.899570890246453,
      0.00891891748529955], Complex[
     0.06876739279209362, -0.4312351242563691]}, {
     Complex[-0.1255540697184589, -0.015029052063782845`], Complex[
     0.012737077674281944`, -0.26018969134440106`]}}, {{Complex[
     0.8806929250896938, 0.00536822731507441], Complex[
     0.06783640257204263, -0.4687743602312221]}, {
     Complex[-0.13534980530993787`, -0.03440784395758088], 
     Complex[-0.025699909374999205`, -0.2583966298700957]}}, {{Complex[
     0.8608064242544993, -0.0010231373202405447`], Complex[
     0.06142199295807821, -0.5052114596437158]}, {
     Complex[-0.13937819964135056`, -0.054130195571041165`], 
     Complex[-0.06272630824297618, -0.24499650560947753`]}}, {{Complex[
     0.8408001466389594, -0.010174636371528344`], Complex[
     0.049972451809183964`, -0.5389381882801926]}, {
     Complex[-0.13694233744297726`, -0.07236660390067316], 
     Complex[-0.09498492129631712, -0.22108558220260968`]}}, {{Complex[
     0.8216206272147479, -0.02173515882600754], Complex[
     0.03439569387543651, -0.5685807655842583]}, {
     Complex[-0.12795403997660373`, -0.0872253722391539], 
     Complex[-0.1195143635902835, -0.18879393612956885`]}}, {{Complex[
     0.8041789841012823, -0.035087691535873815`], Complex[
     0.0159796686927381, -0.5931354667930258]}, {
     Complex[-0.11299756572786393`, -0.09694320670876179], 
     Complex[-0.13405083888989888`, -0.15107989177826758`]}}, {{Complex[
     0.7892534994105026, -0.04938155861551834], 
     Complex[-0.003725441961438532, -0.6120674017888208]}, {
     Complex[-0.09332380142935881, -0.10007314819685083`], 
     Complex[-0.13725071034539504`, -0.11143061832155789`]}}, {{Complex[
     0.7773980760741441, -0.06359026870771052], 
     Complex[-0.02304979641308212, -0.6253616674504517]}, {
     Complex[-0.07077544240986511, -0.09564850052660076], 
     Complex[-0.1288085739584323, -0.0735084506694026]}}, {{Complex[
     0.7688659652471679, -0.0765902520235551], 
     Complex[-0.04035537285060053, -0.6335222936401415]}, {
     Complex[-0.0476521155333792, -0.08330640794073223], 
     Complex[-0.10946287423219934`, -0.040788171201831695`]}}, {{Complex[
     0.7635564370657958, -0.08725390379697082], 
     Complex[-0.05418060598426186, -0.6375208018845726]}, {
     Complex[-0.026529727332857335`, -0.06336169647597246], 
     Complex[-0.08089816254969776, -0.01622735626068784]}}, {{Complex[
     0.76098985198093, -0.09454949335785118], 
     Complex[-0.0633647323098583, -0.638701600765384]}, {
     Complex[-0.010049884105773505`, -0.036828239476379615`], 
     Complex[-0.04556582665302187, -0.002001720383975882]}}, {{Complex[
     0.7603143796542619, -0.09764045237765137], 
     Complex[-0.06714206140443073, -0.6386550840470847]}, {
     Complex[-0.0006938137176135437, -0.005389446074911054], 
     Complex[-0.006451083113797147, 0.0006761872502571646]}}, {{Complex[
     0.7603457118626462, -0.09597690480075585], 
     Complex[-0.0652004085598479, -0.6390709881965062]}, {
     Complex[-0.0005527336477478156, 0.028679429447664707`], Complex[
     0.033186874515586495`, -0.00835060487256592]}}, {{Complex[
     0.7596395112012224, -0.08937259835857826], 
     Complex[-0.05770143258007887, -0.6415846692243561]}, {
     Complex[-0.01110535050952462, 0.06263605978126399], Complex[
     0.07008034528827276, -0.028176712525701808`]}}, {{Complex[
     0.7565947154763225, -0.07806037823678647], 
     Complex[-0.04526317169961974, -0.6476281741386944]}, {
     Complex[-0.033014871330511786`, 0.09344417969424627], Complex[
     0.10121000489034632`, -0.05690649749171538]}}, {{Complex[
     0.749583708317691, -0.06271908563498108], 
     Complex[-0.028906720362496745`, -0.6582970264393686]}, {
     Complex[-0.06596287217703002, 0.11799682736436604`], Complex[
     0.1240439425818871, -0.09179906430225715]}}, {{Complex[
     0.7371023869875325, -0.04446473305327286], 
     Complex[-0.009970220740793397, -0.6742429429974508]}, {
     Complex[-0.10854405586003213`, 0.13338748699296638`], Complex[
     0.13675024132973765`, -0.12948233667780565`]}}, {{Complex[
     0.7179292782556577, -0.024799747515898266`], Complex[
     0.010005188785391002`, -0.69560219544494]}, {
     Complex[-0.15825108193245258`, 0.13721738729733218`], Complex[
     0.1383707242398101, -0.1662323912540595]}}, {{Complex[
     0.6912785871091098, -0.005516745316454008], Complex[
     0.02941061122868335, -0.7219684863520663]}, {
     Complex[-0.21157817091319253`, 0.12791310294296593`], Complex[
     0.12893743028914006`, -0.1983092020718271]}}, {{Complex[
     0.656928491785665, 0.011441860700436913`], Complex[
     0.046715924954320254`, -0.7524172187751894]}, {
     Complex[-0.26426259441464994`, 0.10501347462181951`], Complex[
     0.10950880602136329`, -0.222329140126463]}}, {{Complex[
     0.6153045566324757, 0.02416034864923105], Complex[
     0.060614390728726306`, -0.7855841765111726]}, {
     Complex[-0.3116633079753751, 0.06937417233177184], Complex[
     0.08210363529135623, -0.23564004233438526`]}}, {{Complex[
     0.5675001714942578, 0.030946558191317888`], Complex[
     0.07014951183102237, -0.8197956770480339]}, {
     Complex[-0.34924833861308174`, 0.023237766534992016`], Complex[
     0.04952018061311629, -0.23665109987185556`]}}, {{Complex[
     0.5152221527922617, 0.030526716942315776`], Complex[
     0.0748077201449333, -0.8532397761006254]}, {
     Complex[-0.373133412184176, -0.029869204428445116`], Complex[
     0.01504585974186205, -0.22506318886069054`]}}, {{Complex[
     0.46065965452302504`, 0.022212076209634186`], Complex[
     0.07456284373459016, -0.8841604827214046]}, {
     Complex[-0.3805924526024084, -0.08542321182813399], 
     Complex[-0.01791446973575033, -0.20195063537276825`]}}, {{Complex[
     0.41560302248154257`, 0.009367470250368217], Complex[
     0.0709665172921327, -0.9067249796199766]}, {
     Complex[-0.3734743348682693, -0.1295742502740104], 
     Complex[-0.041774037555737345`, -0.17579244837450736`]}}, {{Complex[
     0.37210465934119974`, -0.0084880342197731], Complex[
     0.06478886761823142, -0.9258879785040174]}, {
     Complex[-0.35455493500642554`, -0.16903914367838135`], 
     Complex[-0.06102420708726375, -0.1452124064267993]}}, {{Complex[
     0.3315148413507975, -0.030633294975650722`], Complex[
     0.05664411026556105, -0.9412497059965866]}, {
     Complex[-0.32491410819093675`, -0.2011419900399133], 
     Complex[-0.07465487624292197, -0.11238353281574054`]}}, {{Complex[
     0.29500859228720766`, -0.05605118915382049], Complex[
     0.047237815261845964`, -0.9526787719267255]}, {
     Complex[-0.28639417259987127`, -0.22362380712451077`], 
     Complex[-0.08215094445601406, -0.0796018484813162]}}, {{Complex[
     0.2635022995392576, -0.0834885175824999], Complex[
     0.0373061163106993, -0.9603147960232506]}, {
     Complex[-0.2414672835147149, -0.23480404823715034`], 
     Complex[-0.08351417018090326, -0.049087374674095144`]}}, {{Complex[
     0.23758884196209754`, -0.11153190321192219`], Complex[
     0.027555296755842954`, -0.9645480446262474]}, {
     Complex[-0.1930570774175006, -0.23368909092323384`], 
     Complex[-0.07923482483272436, -0.022795916760931262`]}}, {{Complex[
     0.2174957721168407, -0.13869325652415385`], Complex[
     0.018607518244517847`, -0.9659780393767591]}, {
     Complex[-0.14433574929582502`, -0.2200219914493943], 
     Complex[-0.0702191827730827, -0.002260355112401604]}}, {{Complex[
     0.20306804082899046`, -0.16349771849872952`], Complex[
     0.010957267956902102`, -0.9653558139679574]}, {
     Complex[-0.0985177299712231, -0.19427673398741166`], 
     Complex[-0.05768350274585442, 0.011525229091191039`]}}, {{Complex[
     0.19377463076519505`, -0.1845681207329755], Complex[
     0.00494180987391373, -0.9635152419021593]}, {
     Complex[-0.05866739801207091, -0.15760686197534868`], 
     Complex[-0.04302800838929878, 0.01817128775474748]}}, {{Complex[
     0.18873667928617763`, -0.20070125443343037`], Complex[
     0.0007271358333467026, -0.9612996341634035]}, {
     Complex[-0.027532052239942643`, -0.11176232132430314`], 
     Complex[-0.027704564697489643`, 0.017907408249775124`]}}, {{Complex[
     0.18677375955270836`, -0.21093305691953593`], 
     Complex[-0.0016905308435472474`, -0.9594894449901563]}, {
     Complex[-0.007404349069926055, -0.05898847440835077], 
     Complex[-0.013090082507197679`, 0.011549694850688996`]}}, {{Complex[
     0.18646486631740294`, -0.21459125161979264`], 
     Complex[-0.002468962564863549, -0.9587363554215256]}, {
     Complex[-0.000012463248675013489`, -0.0019181680597903628`], 
     Complex[-0.00037475269935173235`, 0.00042787923377585565`]}}, {{Complex[
     0.1862210917464017, -0.21133502222939152`], 
     Complex[-0.0018920232422453792`, -0.9595080414654444]}, {
     Complex[-0.006432735495558343, 0.05653761047290212], Complex[
     0.00952891956916487, -0.013719861184815527`]}}, {{Complex[
     0.18436765303783328`, -0.20118157267258294`], 
     Complex[-0.0003323430862597764, -0.9620470266159795]}, {
     Complex[-0.027019380586339205`, 0.11330093703651314`], Complex[
     0.01605288402588622, -0.028876858191625394`]}}, {{Complex[
     0.17923342129181907`, -0.18451907507014637`], Complex[
     0.0017924268910091605`, -0.9663461734481237]}, {
     Complex[-0.06134889271534617, 0.16524538504164393`], Complex[
     0.019014245247914403`, -0.042896238474694676`]}}, {{Complex[
     0.16924607826540072`, -0.1621046887107737], Complex[
     0.004066587474342213, -0.9721426565591154]}, {
     Complex[-0.10818226111987773`, 0.20932939326905436`], Complex[
     0.018628487772038505`, -0.05366182094176174]}}, {{Complex[
     0.15859951619546458`, -0.14353947811193876`], Complex[
     0.005549943861072314, -0.9768376825371823]}, {
     Complex[-0.14740122136043293`, 0.234032284115009], Complex[
     0.01666875506735987, -0.058226791068033634`]}}, {{Complex[
     0.14449270591874128`, -0.12315937396790097`], Complex[
     0.006823212885406471, -0.9817877147668366]}, {
     Complex[-0.19082098542585815`, 0.25263253115227907`], Complex[
     0.01365812000352104, -0.05968002227704813]}}}, {
   Automatic}], $CellContext`approxTraces$$ = {
   InterpolatingFunction[{{0., 11.635528346628861`}}, {
    5, 3, 1, {50}, {4}, 0, 0, 0, 0, Automatic, {}, {}, False}, CompressedData["
1:eJxTTMoPSmViYGBgBGIjBgSYKHX9h84nP3sIHQel8+zfBi/ctdC0HMqvs7c3
3xP5XHg2VHy5vayb0ZPlBRvs56x3SzMNPGW/6tXCYywLLtm31yrcyhO/YT/n
vdTKiP479jc3cNksbH5g//hlu/K0/Y/s37wuTgkSeGb/7W38Ur7El/b/33s/
O7XxjT3Lz9mTnRk/2B97aWfq+O+Tfeeth9fsfn+19zndUmHz44c93x51Kauv
v+0vrjm12/zTP/uKpAaJvUcZHdrzpIPjhFgcplVt6/0fx+awtC3wxILVHA5b
Jr1hcvrB5XB4XrvtYxdeh2NVua3RfgIOWmriOa6/BB36Lh4I0l8m7PCpJstS
MkjUIVxDRIH5n5jD7st72d6ulHCQr09/ey1UyqFZS/DKAUYZh+dXd+1atVbW
wacxZeGUSHmHCDF2l/1NCg5cb6LNt0QoOuw5uEFrpZ6SQ950Vrl5LMoOCrlR
gpNvKTtcclrP0rFBxaFFguVHTZuqg+J/64hdZmoOjsVlGvz71BwSn2/4keyq
7gAAdBS3bA==
    
    "], {{{1., 0.}, {0., 
     0.}}, {{Complex[0.9999999999999996, 0.], Complex[
      0., -2.0696017938825545`*^-8]}, {Complex[-4.535435718872156*^-13, 0.], 
      Complex[0., -0.000021914533183524737`]}}, {{Complex[0.999999999999997, 
      0.], Complex[0., -6.208805381647655*^-8]}, {
      Complex[-2.7212614313232918`*^-12, 0.], Complex[
      0., -0.00004382906636704938]}}, {{Complex[0.999999999999979, 0.], 
      Complex[0., -1.8626416144942873`*^-7]}, {
      Complex[-1.6327568587939725`*^-11, 0.], Complex[
      0., -0.00008765813273409786]}}, {{Complex[0.9999999999999147, 0.], 
      Complex[0., -3.932243408376726*^-7]}, {Complex[-5.170396719514124*^-11, 
      0.], Complex[0., -0.0001314871991011372]}}, {{Complex[
      0.9999999999997528, 0.], Complex[0., -6.829685919811787*^-7]}, {
      Complex[-1.197355029782145*^-10, 0.], Complex[
      0., -0.00017531626546815453`]}}, {{Complex[0.9999999999514891, 0.], 
      Complex[0., -8.133535049676851*^-6]}, {Complex[-4.9907934650148635`*^-9,
       0.], Complex[0., -0.000613606929108926]}}, {{Complex[0.999999999667304,
       0.], Complex[0., -0.00002386250867959812]}, {
      Complex[-2.510091543996148*^-8, 0.], Complex[
      0., -0.0010518975924592253`]}}, {{Complex[0.9999999987565648, 0.], 
      Complex[0., -0.00004786988946783149]}, {Complex[-7.133514712911698*^-8, 
      0.], Complex[0., -0.0014901882546267294`]}}, {{Complex[
      0.9999998282872643, 0.], Complex[0., -0.0004904853629491743]}, {
      Complex[-2.340096714112328*^-6, 0.], Complex[
      0., -0.0047709804824951]}}, {{Complex[0.9999994449592017, 0.], Complex[
      0., -0.0009826360851281951]}, {Complex[-6.635725111603294*^-6, 0.], 
      Complex[0., -0.006752979343676263]}}, {{Complex[0.9999985482584746, 0.],
       Complex[0., -0.001644075959336657]}, {
      Complex[-0.000014360979126905105`, 0.], Complex[
      0., -0.00873497220104074]}}, {{Complex[0.9999972116980307, 0.], Complex[
      0., -0.0023104997840622185`]}, {Complex[-0.000023925499461306693`, 0.], 
      Complex[0., -0.010355089617477518`]}}, {{Complex[0.9999950846824065, 
      0.], Complex[0., -0.0030900379882173477`]}, {
      Complex[-0.00003700398451965334, 0.], Complex[
      0., -0.011975193237200456`]}}, {{Complex[0.9999919026783696, 0.], 
      Complex[0., -0.003982689348861095]}, {Complex[-0.00005414619876853195, 
      0.], Complex[0., -0.013595275621848953`]}}, {{Complex[
      0.9999846396364167, 0.], Complex[0., -0.005515767894766931]}, {
      Complex[-0.0000882496800700243, 0.], Complex[
      0., -0.01599928137057577]}}, {{Complex[0.999973213751388, 0.], Complex[
      0., -0.007297908865220482]}, {Complex[-0.00013430829511739813`, 0.], 
      Complex[0., -0.018403175584967305`]}}, {{Complex[0.9999563191035965, 
      0.], Complex[0., -0.00932909798949388]}, {
      Complex[-0.00019411809961830017`, 0.], Complex[
      0., -0.020806901067471937`]}}, {{Complex[0.9999324379686889, 0.], 
      Complex[0., -0.011609314068698133`]}, {Complex[-0.0002694748356647411, 
      0.], Complex[0., -0.02321038314573008]}}, {{Complex[0.9998661812515693, 
      0.], Complex[0., -0.01634873871809672]}, {
      Complex[-0.00045033912696361693`, 0.], Complex[
      0., -0.027542115390452447`]}}, {{Complex[0.9997600765996367, 0.], 
      Complex[0., -0.0218970221421329]}, {Complex[-0.0006980694279238682, 0.],
       Complex[0., -0.03187200300450658]}}, {{Complex[0.9996006288481021, 0.],
       Complex[0., -0.028253729319595303`]}, {Complex[-0.0010231664663366245`,
       0.], Complex[0., -0.036199039194026714`]}}, {{Complex[
      0.9993724235214605, 0.], Complex[0., -0.03541821033610214]}, {
      Complex[-0.0014361146404098563`, 0.], Complex[
      0., -0.04052190539998941]}}, {{Complex[0.9990580758085094, 0.], Complex[
      0., -0.043389535918267025`]}, {Complex[-0.0019473745308035784`, 0.], 
      Complex[0., -0.044838927416958586`]}}, {{Complex[0.9983608694888274, 
      0.], Complex[0., -0.05722993828377454]}, {
      Complex[-0.0029502405729854952`, 0.], Complex[
      0., -0.05146615272745549]}}, {{Complex[0.9973338872032348, 0.], Complex[
      0., -0.07297129626530859]}, {Complex[-0.00424839615389847, 0.], Complex[
      0., -0.05806487851471665]}}, {{Complex[0.9958868744453038, 0.], Complex[
      0., -0.0906036825208455]}, {Complex[-0.005879232072954486, 0.], Complex[
      0., -0.06462264993739542]}}, {{Complex[0.9939189033200458, 0.], Complex[
      0., -0.11011316628167901`]}, {Complex[-0.007879587800351388, 0.], 
      Complex[0., -0.07112384046400702]}}, {{Complex[0.9913185618154605, 0.], 
      Complex[0., -0.13148082350332485`]}, {Complex[-0.010285540560869898`, 
      0.], Complex[0., -0.07754931110508836]}}, {{Complex[0.9879642084120953, 
      0.], Complex[0., -0.1546816844485903]}, {Complex[-0.013132149453998461`,
       0.], Complex[0., -0.08387608203719249]}}, {{Complex[0.9814697427505366,
       0.], Complex[0., -0.19161644340398326`]}, {
      Complex[-0.018125922196551642`, 0.], Complex[
      0., -0.09284195020051018]}}, {{Complex[0.9726619363831265, 0.], Complex[
      0., -0.23222504877794573`]}, {Complex[-0.024219153664827003`, 0.], 
      Complex[0., -0.10144060349228773`]}}, {{Complex[0.9610628540023416, 0.],
       Complex[0., -0.2763293515654075]}, {Complex[-0.031498412308673215`, 
      0.], Complex[0., -0.10955026628461616`]}}, {{Complex[0.9461611190788117,
       0.], Complex[0., -0.32369563643475907`]}, {
      Complex[-0.04003648251639556, 0.], Complex[
      0., -0.11702648716537853`]}}, {{Complex[0.9274185009512218, 0.], 
      Complex[0., -0.3740249480085591]}, {Complex[-0.04988838292749021, 0.], 
      Complex[0., -0.12370139961628702`]}}, {{Complex[0.9042782779327528, 0.],
       Complex[0., -0.426943255879429]}, {Complex[-0.06108679426286436, 0.], 
      Complex[0., -0.12938361403916718`]}}, {{Complex[0.8761756222740279, 0.],
       Complex[0., -0.4819917399111873]}, {Complex[-0.07363693546186713, 0.], 
      Complex[0., -0.13385890835286773`]}}, {{Complex[0.8425502325855132, 0.],
       Complex[0., -0.5386175594110779]}, {Complex[-0.08751095314031952, 0.], 
      Complex[0., -0.136891887587586]}}, {{Complex[0.8028613948153803, 0.], 
      Complex[0., -0.5961655493760654]}, {Complex[-0.10264193332582615`, 0.], 
      Complex[0., -0.13822879636324706`]}}, {{Complex[0.7566055978286372, 0.],
       Complex[0., -0.6538713658326857]}, {Complex[-0.11891769364645446`, 0.],
       Complex[0., -0.137601672230908]}}, {{Complex[0.7033367529321187, 0.], 
      Complex[0., -0.7108566789916604]}, {Complex[-0.13617456901786643`, 0.], 
      Complex[0., -0.13473402278273705`]}}, {{Complex[0.6426889650070361, 0.],
       Complex[0., -0.7661270865300035]}, {Complex[-0.15419146511180398`, 0.],
       Complex[0., -0.12934819269392858`]}}, {{Complex[0.5744016746515562, 
      0.], Complex[0., -0.8185734827880872]}, {Complex[-0.172684519466156, 
      0.], Complex[0., -0.12117455580799365`]}}, {{Complex[
      0.49834683465573454`, 0.], Complex[0., -0.8669776666722135]}, {
      Complex[-0.19130277754857458`, 0.], Complex[
      0., -0.1099626189149974]}}, {{Complex[0.41455760001970227`, 0.], 
      Complex[0., -0.9100229936776951]}, {Complex[-0.2096253570174039, 0.], 
      Complex[0., -0.0954940553463994]}}, {{Complex[0.32325780014190403`, 0.],
       Complex[0., -0.9463108668373327]}, {Complex[-0.22716063335887776`, 0.],
       Complex[0., -0.07759759555767376]}}, {{Complex[0.22489122839274397`, 
      0.], Complex[0., -0.9743838077877736]}, {Complex[-0.24334802834717423`, 
      0.], Complex[0., -0.05616558684112844]}}, {{Complex[
      0.13903779383314663`, 0.], Complex[0., -0.9902870079619609]}, {
      Complex[-0.25522971064885175`, 0.], Complex[
      0., -0.03583463798432585]}}, {{Complex[0.0704968534662931, 0.], Complex[
      0., -0.9975119360250783]}, {Complex[-0.2632100173949761, 0.], Complex[
      0., -0.018601760340676024`]}}, {{Complex[-1.39573783407538*^-7, 0.], 
      Complex[0., -0.9999999334795795]}, {Complex[-0.2699999823035988, 0.], 
      Complex[0., 3.7558078311312345`*^-8]}}}, {Automatic}], 
   InterpolatingFunction[{{0., 11.635528346628861`}}, {
    5, 3, 1, {42}, {4}, 0, 0, 0, 0, Automatic, {}, {}, False}, CompressedData["
1:eJxTTMoPSmViYGBgBGItBgTQPNm9SeOTnz2EjoPSefb3r71onWdaDuXX2bME
WM15LDwbKr7c/p7TrXlLCzbY+0gd+FXtttVefWHeE7OMi/a7rXVPnau7a6/x
+mv45lNP7Issrnr9v/oKqv6D/Ymt69Rrub/ab9Jo3hCy7Kf9nNnhljqO/+yd
2cUeMuYxOuxwaFiau5vZQbfqVeZNDjaHNR/lOpSmcTroZAYvy1bmdQj74JwU
FSHgIKoT9/GfnJDD1fSKhsVPhR2mLp7E77FG1CHk/pp5b4rEHUSkj+tOtJR0
uBL2cI8pg7TD5Em/vW8dk3EIPid6u65XzoGTVWKroJaCw0ulpX+SeRUdTjoY
uWz7oOiwMm5/N8cVJYfOGp/LUduVHbYypf/MLlZxeNjRKF+rr+rAyz/Hte+1
qoN5tZp85Qw1h8TnG34ku6o7AAAoC5Vq
    
    "], {{{1., 0.}, {0., 
     0.011602395351399173`}}, {{Complex[0.9999999998799384, 
      2.267703520429557*^-13], Complex[
      0.000010957243495767796`, -2.0695930696741264`*^-8]}, {
      Complex[-1.2713072455541272`*^-7, 2.401223701087503*^-10], Complex[
      0.011602395350006171`, -0.00002191448699416668]}}, {{Complex[
      0.9999999996398135, 9.070814080629162*^-13], Complex[
      0.000021914486988904464`, -6.208779208773892*^-8]}, {
      Complex[-2.5426326322785184`*^-7, 7.203671102109319*^-10], Complex[
      0.011602395347220126`, -0.000043828973985702184`]}}, {{Complex[
      0.9999999989194284, 3.6283256306180532`*^-12], Complex[
      0.00004382897396728401, -1.8626337629551727`*^-7]}, {
      Complex[-5.085374112799757*^-7, 2.1611013290183184`*^-9], Complex[
      0.011602395338861555`, -0.00008765794800823785]}}, {{Complex[
      0.9999999977187523, 9.977895476821033*^-12], Complex[
      0.00006574346092461206, -3.9322268343685207`*^-7]}, {
      Complex[-7.62833329056993*^-7, 4.562325022379255*^-9], Complex[
      0.011602395324929148`, -0.00013148692211759148`]}}, {{Complex[
      0.9999999960377337, 2.176995374531713*^-11], Complex[
      0.00008765794785035877, -6.829657137129816*^-7]}, {
      Complex[-1.017161901398537*^-6, 7.924038183316208*^-9], Complex[
      0.011602395305420714`, -0.00017531589635321412`]}}, {{Complex[
      0.9999999527766104, 8.290723746915867*^-10], Complex[
      0.00030680281309717597`, -8.133500913702366*^-6]}, {
      Complex[-3.5646382946520586`*^-6, 9.436808730009995*^-8], Complex[
      0.01160239480247228, -0.000613605654998355]}}, {{Complex[
      0.9999998612699158, 4.183761432972863*^-9], Complex[
      0.0005259476634624057, -0.00002386240924337021]}, {
      Complex[-6.127353485965892*^-6, 2.76861054950509*^-7], Complex[
      0.011602393732997082`, -0.0010518954722251186`]}}, {{Complex[
      0.9999997211293381, 1.1892439920828644`*^-8], Complex[
      0.0007450924881466627, -0.00004786969219098314]}, {
      Complex[-8.716192336923533*^-6, 5.554028883111207*^-7], Complex[
      0.011602392080402483`, -0.0014901853893490775`]}}, {{Complex[
      0.9999995317586601, 2.5769268374507174`*^-8], Complex[
      0.0009642372759103119, -0.00008015535202436794]}, {
      Complex[-0.000011342039716590692`, 9.299935058251092*^-7], Complex[
      0.011602389819323924`, -0.0019284754465163536`]}}, {{Complex[
      0.9999946488885109, 9.028984280434009*^-7], Complex[
      0.003155679851131866, -0.0008583236119350609]}, {
      Complex[-0.000042030663555717814`, 9.958542918900745*^-6], Complex[
      0.01160232186922757, -0.00631139085643954]}}, {{Complex[
      0.9999826680576075, 4.392383694223087*^-6], Complex[
      0.0053470968352168635`, -0.002464335488192289]}, {
      Complex[-0.00008839365077332357, 0.00002859160979740252], Complex[
      0.011602100312796352`, -0.010694339105278249`]}}, {{Complex[
      0.999959589289535, 0.000012308242350949564`], Complex[
      0.007538444767500567, -0.004898194014537075]}, {
      Complex[-0.0001613163039766236, 0.00005682828244749563], Complex[
      0.011601555332533113`, -0.015077271791012726`]}}, {{Complex[
      0.9999193720095362, 0.000026464226334552723`], Complex[
      0.009729639673061324, -0.008159883373601184]}, {
      Complex[-0.0002716839933990168, 0.00009466656534048526], Complex[
      0.011600429819023197`, -0.01946003065484019]}}, {{Complex[
      0.9998539156834263, 0.0000486735508808395], Complex[
      0.011920540734552391`, -0.012249343940347988`]}, {
      Complex[-0.0004303813017924509, 0.0001421026246004636], Complex[
      0.011598379149359989`, -0.02384230237174456]}}, {{Complex[
      0.9996821032446013, 0.00010209194400154776`], Complex[
      0.015257837568255456`, -0.020071902407030336`]}, {
      Complex[-0.000789697076192465, 0.000232821062003601], Complex[
      0.011592473938060791`, -0.03051759459744696]}}, {{Complex[
      0.9993824818062567, 0.00018481886854569064`], Complex[
      0.018592756539190885`, -0.02981495616197543]}, {
      Complex[-0.001324958443536552, 0.0003457631554042883], Complex[
      0.011581476553828908`, -0.03718753682483677]}}, {{Complex[
      0.9988988857647468, 0.0003032398868034156], Complex[
      0.021923495337023757`, -0.041476332843893654`]}, {
      Complex[-0.0020745638556094637`, 0.0004808495590859413], Complex[
      0.011562998293917666`, -0.04384747271776007]}}, {{Complex[
      0.9981641156170944, 0.00046371081281875224`], Complex[
      0.025247502406295287`, -0.05505224217462726]}, {
      Complex[-0.003076779102639949, 0.0006379490325337449], Complex[
      0.011534182369681106`, -0.05049068416216773]}}, {{Complex[
      0.9970999883979983, 0.0006725399047223326], Complex[
      0.02856133581295343, -0.0705366173519757]}, {
      Complex[-0.004369646719911168, 0.0008168590712084701], Complex[
      0.01149170747827173, -0.0571080236112681]}}, {{Complex[
      0.9956174188203809, 0.0009359642154689567], Complex[
      0.03186053140960424, -0.08792036528161419]}, {
      Complex[-0.005990863210842688, 0.0010172833416405996`], Complex[
      0.011431793428407219`, -0.06368754949880132]}}, {{Complex[
      0.9922749924742165, 0.001463583906741973], Complex[
      0.036908004813662854`, -0.11843147280764395`]}, {
      Complex[-0.009221770286499157, 0.0013676594086853026`], Complex[
      0.011295226457227546`, -0.07372741314920002]}}, {{Complex[
      0.987280313689488, 0.0021575064696575746`], Complex[
      0.041880165391124574`, -0.15335905641365394`]}, {
      Complex[-0.013455323703957718`, 0.0017659494828697383`], Complex[
      0.01108941284665829, -0.08356819692644371]}}, {{Complex[
      0.9801598565045245, 0.003038300207096007], Complex[
      0.04674193949391537, -0.19259450638742026`]}, {
      Complex[-0.018818043572698947`, 0.00220877463425904], Complex[
      0.01079448115670922, -0.0931149356679221]}}, {{Complex[
      0.970385875777356, 0.004124728902822451], Complex[
      0.051448959410406454`, -0.23598152999478064`]}, {
      Complex[-0.025427033686007086`, 0.0026913222667124363`], Complex[
      0.010388487079217055`, -0.10224722543010772`]}}, {{Complex[
      0.9573814144133482, 0.005433039553161263], Complex[
      0.0559467163350787, -0.2833042989005957]}, {
      Complex[-0.033386155434769305`, 0.0032070081101542645`], Complex[
      0.009847761408882584, -0.11081692502985756`]}}, {{Complex[
      0.9405271931947174, 0.006976096951500752], Complex[
      0.060169895506757054`, -0.3342747098473142]}, {
      Complex[-0.04278134818621385, 0.0037471228738121315`], Complex[
      0.009147387946331294, -0.1186463792571715]}}, {{Complex[
      0.9191707679224042, 0.008762361589808112], Complex[
      0.06404195680552052, -0.3885190191343403]}, {
      Complex[-0.053675068196680005`, 0.0043004778628839575`], Complex[
      0.008261836507666591, -0.12552736204949372`]}}, {{Complex[
      0.8926383529972332, 0.010794712945134243`], Complex[
      0.0674750354856256, -0.44556420515726536`]}, {
      Complex[-0.06609984940328731, 0.0048530676236718685`], Complex[
      0.007165775690751368, -0.13122096020278506`]}}, {{Complex[
      0.8602496905677003, 0.013069130935941572`], Complex[
      0.0703702478560218, -0.5048245338158563]}, {
      Complex[-0.08005103771167568, 0.005387772887672344], Complex[
      0.005835087599117494, -0.13545865243329583`]}}, {{Complex[
      0.8213363096680918, 0.015573259661312707`], Complex[
      0.07261849567816563, -0.5655889204390634]}, {
      Complex[-0.09547880989031157, 0.0058841325784325296`], Complex[
      0.004248102065797111, -0.13794486688885021`]}}, {{Complex[
      0.7752634553226336, 0.018284891489527683`], Complex[
      0.0741018693309775, -0.6270098110910957]}, {Complex[-0.1122796599739705,
       0.006318219177495418], Complex[
      0.0023870605902305744`, -0.13836131921563818`]}}, {{Complex[
      0.7214558678592733, 0.021170426007436245`], Complex[
      0.07469575211232805, -0.6880944424361698]}, {
      Complex[-0.13028762177073538`, 0.006662657179667052], Complex[
      0.0002398096336846973, -0.13637344045168664`]}}, {{Complex[
      0.6594274519275449, 0.024183377087465367`], Complex[
      0.07427172486624357, -0.7476994752533132]}, {
      Complex[-0.14926559474267093`, 0.006886829153407339], 
      Complex[-0.002198291334337195, -0.13163919419650036`]}}, {{Complex[
      0.5888146876464739, 0.02726302192964227], Complex[
      0.07270135973160978, -0.8045301233776018]}, {
      Complex[-0.16889725039576675`, 0.006957317431999525], 
      Complex[-0.004922279953853766, -0.12382055010357593`]}}, {{Complex[
      0.509413398535349, 0.03033330767495203], Complex[
      0.06986097234482756, -0.857145006058605]}, {
      Complex[-0.18878011405756573`, 0.006838630918405577], 
      Complex[-0.007915374727620014, -0.11259781985603229`]}}, {{Complex[
      0.4212182000109706, 0.033302152948416444`], Complex[
      0.0656373714143857, -0.9039680234658554]}, {
      Complex[-0.20842053731394977`, 0.006494264971815632], 
      Complex[-0.011146714619248576`, -0.09768696635994313]}}, {{Complex[
      0.34176429789719986`, 0.03560501984138467], Complex[
      0.06102849791992687, -0.93712604457102]}, {
      Complex[-0.22407074795597065`, 0.00601301804006762], 
      Complex[-0.013967117239743785`, -0.08239839444630102]}}, {{Complex[
      0.25672331869464676`, 0.03769521793001704], Complex[
      0.0553649344995752, -0.9641613945841633]}, {
      Complex[-0.23877447793685666`, 0.005333209318240482], 
      Complex[-0.0168826025133104, -0.06433844416682705]}}, {{Complex[
      0.16651913365774515`, 0.03949653334385003], Complex[
      0.048619776314102144`, -0.984046636260783]}, {
      Complex[-0.25211022971312486`, 0.004437395788605415], 
      Complex[-0.019847922271834968`, -0.043464319823327116`]}}, {{Complex[
      0.07952516102508127, 0.04082740187119241], Complex[
      0.04145587139483535, -0.9951334317584946]}, {
      Complex[-0.26277124020927256`, 0.0034105945058519093`], 
      Complex[-0.022571378547062024`, -0.021799484546671483`]}}, {{
      Complex[-0.010755408241358405`, 0.04177735360400284], Complex[
      0.033379819114472443`, -0.9985114049652726]}, {
      Complex[-0.2715081507166382, 0.002180538354073937], 
      Complex[-0.025240643857446166`, 0.002171983000367561]}}}, {
    Automatic}]}, $CellContext`\[Psi]0$$ = {1, 0}, $CellContext`gateAngle$$ = 
  Pi, $CellContext`tMax$$ = 11.635528346628861`, $CellContext`H1func$$ = 
  Function[$CellContext`t$, \
$CellContext`selectedH1Profile$$[$CellContext`t$/$CellContext`tMax$$] 
   FE`H1avg$$36], $CellContext`vals$$ = {$CellContext`ww -> 
   1., $CellContext`Delta -> 0., $CellContext`phi -> 
   0.}, $CellContext`hOrigFunc$$ = 
  Function[{$CellContext`t, $CellContext`\[Alpha]0}, {{
    0., 0. + 0.023204790702798347` $CellContext`t (1. + 
       Cos[0. + 2. $CellContext`t] + 
       Complex[0, 1] Sin[0. + 2. $CellContext`t])}, {
    0. + 0.023204790702798347` $CellContext`t (1. + 
       Cos[0. + 2. $CellContext`t] + 
       Complex[0, -1] Sin[0. + 2. $CellContext`t]), 
     0.}}], $CellContext`tCoincidence$$ = {0., 3.141592653589793, 
  6.283185307179586, 9.42477796076938}, $CellContext`t0$$ = 
  0., $CellContext`tC$$ = 
  3.141592653589793, $CellContext`relevantTCoincidence$$ = {0., 
  3.141592653589793, 6.283185307179586, 
  9.42477796076938}, $CellContext`selectedH1Profile$$ = 
  Function[$CellContext`t, 2 $CellContext`t], $CellContext`selectedH1Index$$ =
   2, $CellContext`numSelectedOrders$$ = 
  2, $CellContext`selectedJmpOperators$$, $CellContext`approx\[Psi]0$$, \
$CellContext`jmpFuncs$$, $CellContext`calculatedOrders$$ = {1, 
  2}, $CellContext`\[Alpha]f$$, $CellContext`finalJumps$$, \
$CellContext`firstCoincidenceState$$ = {Complex[1., 0.], Complex[0., 
  0.]}, $CellContext`Omg1$$, $CellContext`coolStates$$ = {{Complex[1., 0.], 
  Complex[0., 0.]}, {Complex[0.992787993759027, 1.854330404112817*^-19], 
  Complex[0.036362331921109985`, -0.11423563483075276`]}, {Complex[
  0.8943663745098984, -0.008163118864801654], Complex[
  0.06968564075375389, -0.44179866807082835`]}, {Complex[
  0.5094629382726144, -0.029367398442648237`], Complex[
  0.08494720662145389, -0.8557856288361922]}, {
  Complex[-0.2634089635466487, -0.05347409486689035], Complex[
  0.05458265511513033, -0.9616532498057863]}}}, 
  TagBox[GridBox[{
     {
      TemplateBox[{InterpretationBox[
         Cell[
          BoxData[
           FormBox["\"Select driving envelope:  \"", TextForm]], 
          "InlineText"], 
         Text["Select driving envelope:  "]],PopupMenuBox[
         Dynamic[$CellContext`selectedH1Index$$], {
         1 -> "\"constant\"", 2 -> "\"linear increase\""}],DynamicBox[
         ToBoxes[
          Plot[
           
           Part[$CellContext`H1pList, \
$CellContext`selectedH1Index$$][$CellContext`t], {$CellContext`t, 0, 1}, 
           AxesLabel -> {"t/t_max", "H1/H1_avg"}, PlotLabel -> 
           "driving envelope H1(t)", ImageSize -> Medium], StandardForm]]},
       "RowDefault"]},
     {
      TagBox[
       StyleBox[
        DynamicModuleBox[{$CellContext`DeltaIn$$ = 0., $CellContext`H1avg$$ = 
         0.54, $CellContext`phiIn$$ = 0., $CellContext`selectedOrders$$ = {1, 
         2}, $CellContext`selectedPlots$$ = {1, 2}, $CellContext`tM$$ = 
         1., $CellContext`wwIn$$ = 1., $CellContext`\[Alpha]0$$ = 0., 
         Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
         Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
         Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
         Typeset`specs$$ = {{{
            Hold[$CellContext`tM$$], 0.01, 
            "Time t / \!\(\*SubscriptBox[\(t\), \(gate\)]\)"}, 0.01, 1.}, {{
            Hold[$CellContext`\[Alpha]0$$], 0., "Offset \[Alpha]0"}, 0., 
           Pi}, {{
            Hold[$CellContext`H1avg$$], 0.2, "Average drive strength H1_avg"},
            0.01, 2.}, {{
            Hold[$CellContext`selectedOrders$$], {1, 2}, 
            "Show Magnus orders"}, {1 -> Graphics[{
               Text[0], 
               EdgeForm[
                Thickness[Tiny]], 
               RGBColor[0.122103, 0.00901808, 0.39826], 
               Rectangle[{1, -0.5}]}, ImageSize -> {30, 12}], 2 -> Graphics[{
               Text[1], 
               EdgeForm[
                Thickness[Tiny]], 
               RGBColor[0.914809, 0.897673, 0.350652], 
               Rectangle[{1, -0.5}]}, ImageSize -> {30, 12}]}}, {{
            Hold[$CellContext`wwIn$$], 1., "Drive frequency \[Omega]"}, 0.01, 
           2.}, {{
            Hold[$CellContext`DeltaIn$$], 0., 
            "Qubit detuning \[CapitalDelta]"}, -1., 1.}, {{
            Hold[$CellContext`phiIn$$], 0., "Rotation axis angle \[Phi]"}, -
           Pi, Pi}, {{
            Hold[$CellContext`selectedPlots$$], {1}, "Visualizations"}, 
           Dynamic[
            Table[$CellContext`i -> Part[{{
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotBlochTraceFromState[$CellContext`\
origTrace$$, {0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> Red], 
                    $CellContext`PlotBlochVectorFromState[
                    $CellContext`origTrace$$[$CellContext`tM$$ \
$CellContext`tMax$$], {Red, 
                    Thickness[0.015]}], 
                    $CellContext`PlotBlochVector[
                    $CellContext`RotationAxisFromHamiltonian[
                    $CellContext`hOrigFunc$$[$CellContext`tM$$ \
$CellContext`tMax$$, 0.]], {Gray, 
                    Thickness[0.01]}], 
                    $CellContext`PlotBlochPointsFromStates[
                    
                    Map[$CellContext`origTrace$$, \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], Red}]}, 
                    Table[
                    $CellContext`PlotBlochTraceFromState[
                    Part[$CellContext`approxTraces$$, $CellContext`i], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    $CellContext`PlotBlochPointsFromStates[
                    Map[
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i], \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]}], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], {
                    $CellContext`PlotBlochPointsFromStates[$CellContext`\
coolStates$$, {
                    PointSize[Large], 
                    Cyan}]}, $CellContext`BlochSphereCircles, \
$CellContext`BlochSphereAxes], ImageSize -> {500, 500}, ViewAngle -> Pi/10, 
                   Axes -> False, Boxed -> False]], "3D", 1}, {
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotBlochAngleTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, {
                    PlotStyle -> Red}], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]}], 
                    Graphics[{
                    PointSize[Large], Cyan, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    
                    Map[$CellContext`XBasisFromZBasis, \
$CellContext`coolStates$$]]]}]}, 
                    Table[
                    $CellContext`PlotBlochAngleTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], PlotRange -> {{-Pi, Pi}, {0, Pi}}, 
                   AxesOrigin -> {0, 0}, AspectRatio -> 0.5, 
                   ImageSize -> {800, 400}, 
                   AxesLabel -> {
                    "x-basis phase angle \[Phi]\n\[Phi] = arg(<\[Psi]|->) - \
arg(<\[Psi]|+>)\n'longitude'", 
                    "x-basis population angle \[Theta]\ncos(\[Theta]/2) = |<\
\[Psi]|+>|\n'latitude'"}, PlotLabel -> 
                   "Bloch angle coordinates in the X-basis"]], 
                 "Cartesian Bloch angle", 0}, {
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotMercatorBlochTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, 
                    PlotStyle -> Red], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]]}]}, 
                    Table[
                    $CellContext`PlotMercatorBlochTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], AspectRatio -> 0.5, 
                   ImageSize -> {800, 400}, 
                   PlotRange -> {{-Pi, Pi}, {-0.5, 0.5}}, 
                   AxesLabel -> {
                    "Mercator longitude \[Phi],\nx-basis phase angle \[Phi]\n\
\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\n", 
                    "Mercator z-intersect z(\[Theta]),\nx-basis population \
angle \[Theta]\ncos(\[Theta]/2) = |<\[Psi]|+>|"}]], "Mercator", 
                 0}}, $CellContext`i, 2], {$CellContext`i, 
              Length[{{
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotBlochTraceFromState[$CellContext`\
origTrace$$, {0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> Red], 
                    $CellContext`PlotBlochVectorFromState[
                    $CellContext`origTrace$$[$CellContext`tM$$ \
$CellContext`tMax$$], {Red, 
                    Thickness[0.015]}], 
                    $CellContext`PlotBlochVector[
                    $CellContext`RotationAxisFromHamiltonian[
                    $CellContext`hOrigFunc$$[$CellContext`tM$$ \
$CellContext`tMax$$, 0.]], {Gray, 
                    Thickness[0.01]}], 
                    $CellContext`PlotBlochPointsFromStates[
                    
                    Map[$CellContext`origTrace$$, \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], Red}]}, 
                    Table[
                    $CellContext`PlotBlochTraceFromState[
                    Part[$CellContext`approxTraces$$, $CellContext`i], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    $CellContext`PlotBlochPointsFromStates[
                    Map[
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i], \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]}], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], {
                    $CellContext`PlotBlochPointsFromStates[$CellContext`\
coolStates$$, {
                    PointSize[Large], 
                    Cyan}]}, $CellContext`BlochSphereCircles, \
$CellContext`BlochSphereAxes], ImageSize -> {500, 500}, ViewAngle -> Pi/10, 
                   Axes -> False, Boxed -> False]], "3D", 1}, {
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotBlochAngleTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, {
                    PlotStyle -> Red}], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]}], 
                    Graphics[{
                    PointSize[Large], Cyan, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    
                    Map[$CellContext`XBasisFromZBasis, \
$CellContext`coolStates$$]]]}]}, 
                    Table[
                    $CellContext`PlotBlochAngleTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], PlotRange -> {{-Pi, Pi}, {0, Pi}}, 
                   AxesOrigin -> {0, 0}, AspectRatio -> 0.5, 
                   ImageSize -> {800, 400}, 
                   AxesLabel -> {
                    "x-basis phase angle \[Phi]\n\[Phi] = arg(<\[Psi]|->) - \
arg(<\[Psi]|+>)\n'longitude'", 
                    "x-basis population angle \[Theta]\ncos(\[Theta]/2) = |<\
\[Psi]|+>|\n'latitude'"}, PlotLabel -> 
                   "Bloch angle coordinates in the X-basis"]], 
                 "Cartesian Bloch angle", 0}, {
                 Hold[
                  Show[
                   Join[{
                    $CellContext`PlotMercatorBlochTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, 
                    PlotStyle -> Red], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]]}]}, 
                    Table[
                    $CellContext`PlotMercatorBlochTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], AspectRatio -> 0.5, 
                   ImageSize -> {800, 400}, 
                   PlotRange -> {{-Pi, Pi}, {-0.5, 0.5}}, 
                   AxesLabel -> {
                    "Mercator longitude \[Phi],\nx-basis phase angle \[Phi]\n\
\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\n", 
                    "Mercator z-intersect z(\[Theta]),\nx-basis population \
angle \[Theta]\ncos(\[Theta]/2) = |<\[Psi]|+>|"}]], "Mercator", 0}}]}]]}}, 
         Typeset`size$$ = {1309., {256.634033203125, 262.365966796875}}, 
         Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
         True, $CellContext`tM$2728654$$ = 
         0, $CellContext`\[Alpha]0$2728655$$ = 
         0, $CellContext`H1avg$2728656$$ = 
         0, $CellContext`selectedOrders$2728657$$ = 
         False, $CellContext`wwIn$2728658$$ = 
         0, $CellContext`DeltaIn$2728659$$ = 0, $CellContext`phiIn$2728660$$ =
          0}, 
         DynamicBox[Manipulate`ManipulateBoxes[
          1, StandardForm, 
           "Variables" :> {$CellContext`DeltaIn$$ = 0., $CellContext`H1avg$$ = 
             0.2, $CellContext`phiIn$$ = 
             0., $CellContext`selectedOrders$$ = {1, 
              2}, $CellContext`selectedPlots$$ = {1}, $CellContext`tM$$ = 
             0.01, $CellContext`wwIn$$ = 1., $CellContext`\[Alpha]0$$ = 0.}, 
           "ControllerVariables" :> {
             Hold[$CellContext`tM$$, $CellContext`tM$2728654$$, 0], 
             
             Hold[$CellContext`\[Alpha]0$$, $CellContext`\[Alpha]0$2728655$$, 
              0], 
             Hold[$CellContext`H1avg$$, $CellContext`H1avg$2728656$$, 0], 
             
             Hold[$CellContext`selectedOrders$$, \
$CellContext`selectedOrders$2728657$$, False], 
             Hold[$CellContext`wwIn$$, $CellContext`wwIn$2728658$$, 0], 
             Hold[$CellContext`DeltaIn$$, $CellContext`DeltaIn$2728659$$, 0], 
             
             Hold[$CellContext`phiIn$$, $CellContext`phiIn$2728660$$, 0]}, 
           "OtherVariables" :> {
            Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
             Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
             Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
             Typeset`initDone$$, Typeset`skipInitDone$$}, 
           "Body" :> ($CellContext`\[Psi]0$$ = {1, 
              0}; $CellContext`\[Psi]0$$ = $CellContext`\[Psi]0$$/
              Norm[$CellContext`\[Psi]0$$]; $CellContext`gateAngle$$ = 
             Pi; $CellContext`tMax$$ = 
             2 ($CellContext`gateAngle$$/$CellContext`H1avg$$); 
            Dynamic[$CellContext`selectedH1Index$$]; \
$CellContext`selectedH1Profile$$ = 
             Part[$CellContext`H1pList, $CellContext`selectedH1Index$$]; \
$CellContext`H1func$$ = 
             Function[$CellContext`t$, \
$CellContext`selectedH1Profile$$[$CellContext`t$/$CellContext`tMax$$] \
$CellContext`H1avg$$]; $CellContext`vals$$ = {$CellContext`ww -> \
$CellContext`wwIn$$, $CellContext`Delta -> $CellContext`DeltaIn$$, \
$CellContext`phi -> $CellContext`phiIn$$}; $CellContext`hOrigFunc$$ = \
$CellContext`GetHFunc[$CellContext`Horig, $CellContext`H1func$$, \
$CellContext`vals$$]; $CellContext`origTrace$$ = 
             ReplaceAll[$CellContext`\[Psi], 
               $CellContext`NTrajectory[$CellContext`hOrigFunc$$, \
$CellContext`tMax$$, $CellContext`\[Alpha]0$$, $CellContext`\[Psi]0$$]]; \
$CellContext`t0$$ = 
             ReplaceAll[$CellContext`\[Alpha]0$$/$CellContext`ww, \
$CellContext`vals$$]; $CellContext`tC$$ = 
             ReplaceAll[
              Pi/$CellContext`ww, $CellContext`vals$$]; \
$CellContext`tCoincidence$$ = $CellContext`t0$$ + 
              Range[0., $CellContext`tMax$$, $CellContext`tC$$]; \
$CellContext`firstCoincidenceState$$ = \
$CellContext`origTrace$$[$CellContext`t0$$]; $CellContext`calculatedOrders$$ = \
$CellContext`selectedOrders$$; $CellContext`numSelectedOrders$$ = 
             Length[$CellContext`calculatedOrders$$]; \
$CellContext`approxTraces$$ = Table[
               ReplaceAll[$CellContext`\[Psi], 
                $CellContext`NTrajectory[
                 $CellContext`GetHFunc[
                  Part[$CellContext`ApproxHList, 
                   
                   Part[$CellContext`calculatedOrders$$, $CellContext`i]], \
$CellContext`H1func$$, $CellContext`vals$$], $CellContext`tMax$$, \
$CellContext`\[Alpha]0$$, $CellContext`firstCoincidenceState$$, \
$CellContext`t0$$]], {$CellContext`i, $CellContext`numSelectedOrders$$}]; \
$CellContext`Omg1$$[
               Pattern[$CellContext`t0$, 
                Blank[]]] = ReplaceAll[
               ReplaceAll[
                
                ReplaceAll[(-
                  I) $CellContext`tC$$ (($CellContext`H1[$CellContext`t0$]/
                    4) $CellContext`sx + (
                    Derivative[1][$CellContext`H1][$CellContext`t0$]/(
                    8 $CellContext`ww)) (Pi $CellContext`sx + 
                    Sin[2 $CellContext`ww $CellContext`t0$] $CellContext`sx + 
                    Cos[2 $CellContext`ww $CellContext`t0$] \
$CellContext`sy)), $CellContext`vals$$], $CellContext`pms], {$CellContext`H1 -> \
$CellContext`H1func$$}]; $CellContext`coolStates$$ = FoldList[Dot[
                MatrixExp[
                 $CellContext`Omg1$$[#2]], #]& , \
$CellContext`firstCoincidenceState$$, $CellContext`tCoincidence$$]; 
            Dynamic[$CellContext`relevantTCoincidence$$ = 
               Select[$CellContext`tCoincidence$$, # < $CellContext`tM$$ \
$CellContext`tMax$$& ]; Grid[{
                 Table[
                  ReleaseHold[
                   Part[{{
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochTraceFromState[$CellContext`\
origTrace$$, {0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> Red], 
                    $CellContext`PlotBlochVectorFromState[
                    $CellContext`origTrace$$[$CellContext`tM$$ \
$CellContext`tMax$$], {Red, 
                    Thickness[0.015]}], 
                    $CellContext`PlotBlochVector[
                    $CellContext`RotationAxisFromHamiltonian[
                    $CellContext`hOrigFunc$$[$CellContext`tM$$ \
$CellContext`tMax$$, 0.]], {Gray, 
                    Thickness[0.01]}], 
                    $CellContext`PlotBlochPointsFromStates[
                    
                    Map[$CellContext`origTrace$$, \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], Red}]}, 
                    Table[
                    $CellContext`PlotBlochTraceFromState[
                    Part[$CellContext`approxTraces$$, $CellContext`i], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    $CellContext`PlotBlochPointsFromStates[
                    Map[
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i], \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]}], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], {
                    $CellContext`PlotBlochPointsFromStates[$CellContext`\
coolStates$$, {
                    PointSize[Large], 
                    Cyan}]}, $CellContext`BlochSphereCircles, \
$CellContext`BlochSphereAxes], ImageSize -> {500, 500}, ViewAngle -> Pi/10, 
                    Axes -> False, Boxed -> False]], "3D", 1}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochAngleTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, {
                    PlotStyle -> Red}], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]}], 
                    Graphics[{
                    PointSize[Large], Cyan, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    
                    Map[$CellContext`XBasisFromZBasis, \
$CellContext`coolStates$$]]]}]}, 
                    Table[
                    $CellContext`PlotBlochAngleTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], PlotRange -> {{-Pi, Pi}, {0, Pi}}, 
                    AxesOrigin -> {0, 0}, AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    AxesLabel -> {
                    "x-basis phase angle \[Phi]\n\[Phi] = arg(<\[Psi]|->) - \
arg(<\[Psi]|+>)\n'longitude'", 
                    "x-basis population angle \[Theta]\ncos(\[Theta]/2) = |<\
\[Psi]|+>|\n'latitude'"}, PlotLabel -> 
                    "Bloch angle coordinates in the X-basis"]], 
                    "Cartesian Bloch angle", 0}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotMercatorBlochTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, 
                    PlotStyle -> Red], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]]}]}, 
                    Table[
                    $CellContext`PlotMercatorBlochTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    PlotRange -> {{-Pi, Pi}, {-0.5, 0.5}}, 
                    AxesLabel -> {
                    "Mercator longitude \[Phi],\nx-basis phase angle \[Phi]\n\
\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\n", 
                    "Mercator z-intersect z(\[Theta]),\nx-basis population \
angle \[Theta]\ncos(\[Theta]/2) = |<\[Psi]|+>|"}]], "Mercator", 
                    0}}, $CellContext`i, 
                    1]], {$CellContext`i, $CellContext`selectedPlots$$}], {
                  StringForm["\!\(\*SubscriptBox[\(t\), \(gate\)]\) = ``", 
                   NumberForm[$CellContext`tMax$$, {5, 2}]]}}]]), 
           "Specifications" :> {{{$CellContext`tM$$, 0.01, 
               "Time t / \!\(\*SubscriptBox[\(t\), \(gate\)]\)"}, 0.01, 1., 
              Appearance -> "Open", AnimationRate -> 0.03, RefreshRate -> 
              0.005}, {{$CellContext`\[Alpha]0$$, 0., "Offset \[Alpha]0"}, 0.,
               Pi, Appearance -> 
              "Open"}, {{$CellContext`H1avg$$, 0.2, 
               "Average drive strength H1_avg"}, 0.01, 2., Appearance -> 
              "Open"}, {{$CellContext`selectedOrders$$, {1, 2}, 
               "Show Magnus orders"}, {1 -> Graphics[{
                  Text[0], 
                  EdgeForm[
                   Thickness[Tiny]], 
                  RGBColor[0.122103, 0.00901808, 0.39826], 
                  Rectangle[{1, -0.5}]}, ImageSize -> {30, 12}], 2 -> 
               Graphics[{
                  Text[1], 
                  EdgeForm[
                   Thickness[Tiny]], 
                  RGBColor[0.914809, 0.897673, 0.350652], 
                  Rectangle[{1, -0.5}]}, ImageSize -> {30, 12}]}, ControlType -> 
              CheckboxBar}, {{$CellContext`wwIn$$, 1., 
               "Drive frequency \[Omega]"}, 0.01, 
              2.}, {{$CellContext`DeltaIn$$, 0., 
               "Qubit detuning \[CapitalDelta]"}, -1., 
              1.}, {{$CellContext`phiIn$$, 0., 
               "Rotation axis angle \[Phi]"}, -Pi, 
              Pi}, {{$CellContext`selectedPlots$$, {1}, "Visualizations"}, 
              Dynamic[
               Table[$CellContext`i -> Part[{{
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochTraceFromState[$CellContext`\
origTrace$$, {0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> Red], 
                    $CellContext`PlotBlochVectorFromState[
                    $CellContext`origTrace$$[$CellContext`tM$$ \
$CellContext`tMax$$], {Red, 
                    Thickness[0.015]}], 
                    $CellContext`PlotBlochVector[
                    $CellContext`RotationAxisFromHamiltonian[
                    $CellContext`hOrigFunc$$[$CellContext`tM$$ \
$CellContext`tMax$$, 0.]], {Gray, 
                    Thickness[0.01]}], 
                    $CellContext`PlotBlochPointsFromStates[
                    
                    Map[$CellContext`origTrace$$, \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], Red}]}, 
                    Table[
                    $CellContext`PlotBlochTraceFromState[
                    Part[$CellContext`approxTraces$$, $CellContext`i], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    $CellContext`PlotBlochPointsFromStates[
                    Map[
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i], \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]}], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], {
                    $CellContext`PlotBlochPointsFromStates[$CellContext`\
coolStates$$, {
                    PointSize[Large], 
                    Cyan}]}, $CellContext`BlochSphereCircles, \
$CellContext`BlochSphereAxes], ImageSize -> {500, 500}, ViewAngle -> Pi/10, 
                    Axes -> False, Boxed -> False]], "3D", 1}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochAngleTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, {
                    PlotStyle -> Red}], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]}], 
                    Graphics[{
                    PointSize[Large], Cyan, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    
                    Map[$CellContext`XBasisFromZBasis, \
$CellContext`coolStates$$]]]}]}, 
                    Table[
                    $CellContext`PlotBlochAngleTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], PlotRange -> {{-Pi, Pi}, {0, Pi}}, 
                    AxesOrigin -> {0, 0}, AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    AxesLabel -> {
                    "x-basis phase angle \[Phi]\n\[Phi] = arg(<\[Psi]|->) - \
arg(<\[Psi]|+>)\n'longitude'", 
                    "x-basis population angle \[Theta]\ncos(\[Theta]/2) = |<\
\[Psi]|+>|\n'latitude'"}, PlotLabel -> 
                    "Bloch angle coordinates in the X-basis"]], 
                    "Cartesian Bloch angle", 0}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotMercatorBlochTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, 
                    PlotStyle -> Red], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]]}]}, 
                    Table[
                    $CellContext`PlotMercatorBlochTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    PlotRange -> {{-Pi, Pi}, {-0.5, 0.5}}, 
                    AxesLabel -> {
                    "Mercator longitude \[Phi],\nx-basis phase angle \[Phi]\n\
\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\n", 
                    "Mercator z-intersect z(\[Theta]),\nx-basis population \
angle \[Theta]\ncos(\[Theta]/2) = |<\[Psi]|+>|"}]], "Mercator", 
                    0}}, $CellContext`i, 2], {$CellContext`i, 
                 Length[{{
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochTraceFromState[$CellContext`\
origTrace$$, {0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> Red], 
                    $CellContext`PlotBlochVectorFromState[
                    $CellContext`origTrace$$[$CellContext`tM$$ \
$CellContext`tMax$$], {Red, 
                    Thickness[0.015]}], 
                    $CellContext`PlotBlochVector[
                    $CellContext`RotationAxisFromHamiltonian[
                    $CellContext`hOrigFunc$$[$CellContext`tM$$ \
$CellContext`tMax$$, 0.]], {Gray, 
                    Thickness[0.01]}], 
                    $CellContext`PlotBlochPointsFromStates[
                    
                    Map[$CellContext`origTrace$$, \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], Red}]}, 
                    Table[
                    $CellContext`PlotBlochTraceFromState[
                    Part[$CellContext`approxTraces$$, $CellContext`i], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    $CellContext`PlotBlochPointsFromStates[
                    Map[
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i], \
$CellContext`relevantTCoincidence$$], {
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]}], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], {
                    $CellContext`PlotBlochPointsFromStates[$CellContext`\
coolStates$$, {
                    PointSize[Large], 
                    Cyan}]}, $CellContext`BlochSphereCircles, \
$CellContext`BlochSphereAxes], ImageSize -> {500, 500}, ViewAngle -> Pi/10, 
                    Axes -> False, Boxed -> False]], "3D", 1}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotBlochAngleTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, {
                    PlotStyle -> Red}], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]}], 
                    Graphics[{
                    PointSize[Large], Cyan, 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    
                    Map[$CellContext`XBasisFromZBasis, \
$CellContext`coolStates$$]]]}]}, 
                    Table[
                    $CellContext`PlotBlochAngleTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], PlotRange -> {{-Pi, Pi}, {0, Pi}}, 
                    AxesOrigin -> {0, 0}, AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    AxesLabel -> {
                    "x-basis phase angle \[Phi]\n\[Phi] = arg(<\[Psi]|->) - \
arg(<\[Psi]|+>)\n'longitude'", 
                    "x-basis population angle \[Theta]\ncos(\[Theta]/2) = |<\
\[Psi]|+>|\n'latitude'"}, PlotLabel -> 
                    "Bloch angle coordinates in the X-basis"]], 
                    "Cartesian Bloch angle", 0}, {
                    Hold[
                    Show[
                    Join[{
                    $CellContext`PlotMercatorBlochTraceFromState[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], {0, $CellContext`tM$$ $CellContext`tMax$$}, 
                    PlotStyle -> Red], 
                    Graphics[{
                    PointSize[Large], Red, 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    
                    Composition[$CellContext`XBasisFromZBasis, \
$CellContext`origTrace$$], $CellContext`relevantTCoincidence$$]]]]}]}, 
                    Table[
                    $CellContext`PlotMercatorBlochTraceFromState[
                    Composition[$CellContext`XBasisFromZBasis, 
                    Part[$CellContext`approxTraces$$, $CellContext`i]], {
                    0, $CellContext`tM$$ $CellContext`tMax$$}, PlotStyle -> 
                    Part[$CellContext`approxColors, 
                    
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]]], \
{$CellContext`i, $CellContext`numSelectedOrders$$}], 
                    Table[
                    Graphics[{
                    PointSize[Large], 
                    Part[$CellContext`approxColors, 
                    Part[$CellContext`calculatedOrders$$, $CellContext`i]], 
                    Point[
                    Map[$CellContext`MercatorCoordinatesFromBlochAngle, 
                    Map[$CellContext`BlochAngleCoordinatesFromState, 
                    Map[
                    Composition[$CellContext`XBasisFromZBasis, 
                    
                    Part[$CellContext`approxTraces$$, $CellContext`i]], \
$CellContext`relevantTCoincidence$$]]]]}], {$CellContext`i, \
$CellContext`numSelectedOrders$$}]], AspectRatio -> 0.5, 
                    ImageSize -> {800, 400}, 
                    PlotRange -> {{-Pi, Pi}, {-0.5, 0.5}}, 
                    AxesLabel -> {
                    "Mercator longitude \[Phi],\nx-basis phase angle \[Phi]\n\
\[Phi] = arg(<\[Psi]|->) - arg(<\[Psi]|+>)\n", 
                    "Mercator z-intersect z(\[Theta]),\nx-basis population \
angle \[Theta]\ncos(\[Theta]/2) = |<\[Psi]|+>|"}]], "Mercator", 0}}]}]], 
              ControlType -> CheckboxBar}}, "Options" :> {}, 
           "DefaultOptions" :> {}],
          ImageSizeCache->{1714., {286., 291.}},
          SingleEvaluation->True],
         Deinitialization:>None,
         DynamicModuleValues:>{},
         SynchronousInitialization->True,
         UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
         UnsavedVariables:>{Typeset`initDone$$},
         UntrackedVariables:>{Typeset`size$$}], "Manipulate",
        Deployed->True,
        StripOnInput->False],
       Manipulate`InterpretManipulate[1]]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{DownValues[$CellContext`Omg1$$] = {HoldPattern[
         $CellContext`Omg1$$[
          Pattern[$CellContext`t0$, 
           Blank[]]]] :> {{
          Complex[0., 0.], 
          Complex[0., -3.141592653589793] (
           0.023204790702798347` $CellContext`t0$ + 
           0.011602395351399173` (Pi + 
             Complex[0, -1] Cos[2. $CellContext`t0$] + 
             Sin[2. $CellContext`t0$]))}, {
         Complex[0., -3.141592653589793] (
           0.023204790702798347` $CellContext`t0$ + 
           0.011602395351399173` (Pi + Complex[0, 1] Cos[2. $CellContext`t0$] + 
             Sin[2. $CellContext`t0$])), 
          Complex[0., 0.]}}}}}]], "Output",
 CellChangeTimes->{
  3.721643921488803*^9, 3.721649700975245*^9, {3.7216500234086847`*^9, 
   3.721650046155281*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.721650138837017*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.721650147786075*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gateAngle", "=", "Pi"}], ";", 
  RowBox[{"H1avg", "=", "0.4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tMax", " ", "=", " ", 
   RowBox[{"2", "*", 
    RowBox[{"gateAngle", "/", "H1avg"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"selectedH1Profile", "=", 
   RowBox[{"H1pList", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1func", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"t", ",", 
     RowBox[{
      RowBox[{"selectedH1Profile", "[", 
       RowBox[{"t", "/", "tMax"}], "]"}], "*", "H1avg"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vals", " ", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ww", "\[Rule]", "1"}], ",", 
     RowBox[{"Delta", "\[Rule]", "0"}], ",", 
     RowBox[{"phi", "\[Rule]", "0"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tC", "=", 
   RowBox[{"Pi", "/", "ww"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Omg1", "[", "t0_", "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "I"}], " ", "tC", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"H1", "'"}], "[", "t0", "]"}], "/", " ", 
          RowBox[{"(", 
           RowBox[{"8", " ", "ww"}], ")"}]}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Sin", "[", 
             RowBox[{"2", "ww", " ", "t0"}], "]"}], "sx"}], "+", 
           RowBox[{
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", "ww", " ", "t0"}], "]"}], "sy"}]}], ")"}]}], 
        ")"}]}], "/.", "vals"}], "/.", "pms"}], "/.", 
    RowBox[{"{", 
     RowBox[{"H1", "\[Rule]", "H1func"}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.721650134572432*^9, 3.721650218327557*^9}, {
  3.721650558952023*^9, 3.72165055942026*^9}, {3.7216513744086113`*^9, 
  3.721651381384774*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Omg1", "[", "ta", "]"}]], "Input",
 CellChangeTimes->{{3.721650190236567*^9, 3.721650195084791*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"0.012732395447351628`", " ", "ta"}], "+", 
        RowBox[{"0.006366197723675814`", " ", 
         RowBox[{"(", 
          RowBox[{"\[Pi]", "-", 
           RowBox[{"\[ImaginaryI]", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", "ta"}], "]"}]}], "+", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", "ta"}], "]"}]}], ")"}]}]}], ")"}]}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"0.012732395447351628`", " ", "ta"}], "+", 
        RowBox[{"0.006366197723675814`", " ", 
         RowBox[{"(", 
          RowBox[{"\[Pi]", "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            RowBox[{"Cos", "[", 
             RowBox[{"2", " ", "ta"}], "]"}]}], "+", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", " ", "ta"}], "]"}]}], ")"}]}]}], ")"}]}], ",", "0"}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.721650192115951*^9, 3.721650220002082*^9}, 
   3.721650397362554*^9, 3.721650561162266*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RotAx", "[", "ta_", "]"}], "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"RotationAxisFromHamiltonian", "[", 
     RowBox[{
      RowBox[{"Omg1", "[", "ta", "]"}], "*", 
      RowBox[{"I", "/", "Pi"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ta", ">", "0"}], ",", 
      RowBox[{"ww", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.721650257568095*^9, 3.7216504286040163`*^9}, {
  3.7216504972121277`*^9, 3.721650497495522*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.012732395447351628`", " ", 
    RowBox[{"Cos", "[", "ta", "]"}], " ", 
    RowBox[{"Sin", "[", "ta", "]"}]}], ",", 
   RowBox[{"0.006366197723675814`", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "ta"}], "]"}]}], ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.721650290992527*^9, 3.721650321562358*^9}, {
   3.721650364175042*^9, 3.721650430675613*^9}, 3.721650498905901*^9, 
   3.721650562002005*^9, 3.7216513886049128`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"RotAx", "[", "t", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"RotAx", "[", "t", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "tMax"}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<evolution start \!\(\*SubscriptBox[\(t\), \(0\)]\)\>\"", ",", 
      "\"\<rotation axis component\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(\[Sigma]\), \(x\)]\)\>\"", ",", 
      "\"\<\!\(\*SubscriptBox[\(\[Sigma]\), \(y\)]\)\>\""}], "}"}]}], ",", 
   RowBox[{"PlotRangePadding", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0.05"}], "}"}]}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", 
   RowBox[{"GridLines", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "0", "}"}], ",", 
      RowBox[{"{", "0", "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.721650432597056*^9, 3.721650463430464*^9}, {
  3.721650509356501*^9, 3.721650517374711*^9}, {3.721650576513815*^9, 
  3.721650698704221*^9}, {3.721650730053331*^9, 3.7216507429649982`*^9}, {
  3.7216509882332153`*^9, 3.721651001140594*^9}, {3.7216510425208797`*^9, 
  3.721651106415867*^9}, {3.7216512229928637`*^9, 3.721651286307774*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1:eJwU2nc81P8fAHB7Ze+d4zgOJWmgvF8kO6loUFbZe959jmhIEQ1StJSRlKRS
inhHIiJZSYPsXfiWUej3+f11j9fj3vder9f7c+/n447iGbLbi4ONja2Si43t
/6+1wanVB09mmDiMvYhsPr3OpFOoo2u2IgKFsMt550iKovJk+db6ipOosZcZ
YC+pgnQbKnc8rkhHkZxVWwgJPeTtK5JSUJGLjvKYyXqKAuLcvFk7p+IJOh3c
/ozG5YBas5tY2RWv0S2/R6ECBW5I+O5qj9gDtcihzpl3ZIc7sikJtzwwX4tW
pQ/lDtW7o9pXspIS6+tQgLzcwwflHuh535EHiffeos3GNrGy1w6jW2rLvUFZ
zSh4j6TtN3Mf9Lz9surNina0IaD8+rhmMJKt4jDRE+tAPxs9KeZXgxHzbvCB
Gu8OdHeqpbVGIAQZHrW4MCzWiXbuTaCrjYWgco255TW+HxHvf9fzU5pD0UvC
qRtLdiOB0TMFN33DkeKR6l+7/LtRXeyCI84KR7H2uqKDuBuFSr9kc2kMR1vV
uC35Aj6joB8PRpe1IlBVU2mpQ/UXNHft1GBTfwSqXi15oS+oB9F7pEsiDKOQ
qsCx+xGve9DYnV3NhR5R6MSviTpuuV4kObeexzIpCpk1vF7Wqu1Fb3bRPR9/
jEKeL15sMEz9jpy/inxa4x+N0opDtnE8/476hHga41OjUU2u+q53/d/R4M/r
jLUl0Uj13MXAQ5v70BZXaXrBf9FowNMv9/hAH5ouOzD+LZyBJPevfmQj3I9C
jeQzBS4ykPmOzioJw360mTej+lwxA+VtMv2cf64fla1sgKsjDHREUE6s0XAA
ffEvZr+7i4kusbcopx8ZQFvH/hxn+TNR7VyCzsHzA0jjwtqAmyeYiNo3bflj
cABR77xs7CphoqGnb+PELwyiRyJx4v+4CMQW5P6U+/kgEhWqMuKXIZA8dWFi
oXcQ2VJPz0drEsghjXagd+0Q2mUzHB9jTSB/a3y+bd8QqrbOOyp2gECn2PbV
vYkfQkWWEMnvS6Dy4MT1RS1D6E7cnc9KCQTqUFf2z54fQudKPa4ZXiTQz69P
b6WtHkY8Gn1zT28QSODSjq5TlsPo07Ud2WmFBKLaDgkRIcPIKu6JTUspgUw4
jpoHXhlGYjlcTwIwgQ68kIxxw8No/bLcZZ8GAp2jmY9uFxlBLX4numK/EOhu
zxdlw00jyE1C7k3GAIFeZ0Q46biNILOBZVuhCQL12K1KWX16BK2U5W4dmCHQ
AmdujfjDEZTeHBgis0Ag8QqjRe6uEbSm/n554TKBdMPb1i6ujCDrW3lLWRws
ZKXl7z2pMYr0TqVKj/KwkOd39hu99qOILf38VLoAC8VeyWpvix5FU3H1/jeE
WOiK/TqBupujaIlqEcMlykKPuRvgRd0oElwRFW0QY6Gml+6Moh+jaMNRVeUJ
cRYajlh4kC09hk46+t/0l2Ahdu0Lg2kmY+jXreZUSzJW7KcpJHqPobFljanj
ZPuNWXgXcW4MVcVbVMuR/Tk47DsT+GwMdWTMiIuIsFAA788qt54x9L29/4eH
IAslViX+3s0zjs7lNHiJ87PQrShlHYs14yiuyzpFhZuFynWeeRruHUeXDf6y
UthYqHNgR5ZO3Dh6+N7Xfu9fAk1fHWpZfWcc5biI0uJ+k/nbfZRH4v04qvTx
0OL6SeaPX2orz9w4uhj+8ujoCIHQq6KIRaUJZPVfmIP2dwI5M8zvTW6fQA7m
1a1NXQSKXPP1e2/QBLoe3bWh+T2Zz6EImfaMCbRf8H2pzhsCFV5fZV9XOYFo
1wqTJ8rJ/AkYVxQJTaLQuBKTM3lk/qrbZrI3TCKZquC73pkEkiD8NdMPTaIV
b4Nj+WcJZDWSlUE8mERHPesrtocSyPPmuqbAzkmUcGVrY4EHgY46NXC4L0+i
p2181wN2E+jx64UQix1TSP6nJ7+8PoGaWBfuGEZNoWad4GBuCoFG1ml+07kx
heJNa7QcRQikeGufjcTUFOqmWrorjTNRYuwz6veUH4jLe3tTQCYTWSlsrxQo
/YEeHXnn8oM8j/zl7U4bvvxAX+YGBHoCmShlfjoxWesnEg8R/cqDmCg9XHvM
oO4nki52vJL6lYEcxcqPu039RCXx2/afqWGgVfupQtsFptF2xYIXvwoYqHnu
cX7Iumm0s251DzWMgRwMPnysjZ9GIiYSY7+WotGjkzJqzunT6HdaROu5nmgk
3u4a8vPONHLP21+SjaNRR9gUr/z7aXS90tFI61g02vdQwDBEcQbtWrstdfpP
FHKlb78m92IGFfCmd3N8ikSYSBkpbppB8cFfRvweRSKVhvb15t9n0OpCzXnH
5EjU7+PZFMw7i07QQ2vLjSKRV3788munWcTDqRHQmxGBAlXK3YJnZ1Hs791X
fTeGI5b0Wupr7V/obxFr35udwSjgX6Izu+kvdLvCy+5eTxA6ONpzAe39hZwb
/st7GRiEUPm55Ypjv9CL0hGJ6MRAxOX642Np5y8UONKumVHij87nP0i6E/8b
Hd0eUOrW743yDHR+JrXPIb4/EcSfgkOoZbdWuUPMInLyYtMLXaePnynOclHP
LyJfm4QTGkYb8fXh8p3zOYtooNrY0dHMCPux7IZuNC4i6ZY3zw5ommLOnBDR
Cbk/SM++8obXOmu8aeap96nnf1BMyDuRpxcdcfZ5M4ny339R6/Njq+MEPXHi
gVWuqfxL6G6ifNDpU544UK3jrrvSEjrKKvirvOKJDcu8THi3L6E1HavspqYO
4/aeM36Ol8j2cnlBz+q9MO+aFvxDfxlZz0WHnfDwwyFNLoFqoSvov4dRaTFC
oXh47Ybb2adWkK2JaEyYeSg+mC78UeHaCmJzFhSZZYViG+dqJFm3gua5ZWRT
h0OxxqiGBLfiP5S0MJTA9jwM93DOvhiu/4d2hsYLXzGLwE4+7354fvuH5GsC
+U6HReCmxjy13tl/yMQX3oxnR+Bvb+/XTQizgZGI0S6+vxH43XlXvUFDNojX
1JFh3ovEBUq1nJ3n2eC/g+clFKaisGeLnnL6VTZwPRrs+kQ8Gisfv7F5Vz4b
8Dt0RxZtisaXBqODmsvZ4GovtedlfDQ+cV+r680QG2juqMsw4mNgk0OXZ05O
s0HupxXRSk0GXhTmFDT7ywZz2u4nMq0YODT8K1SJskNqAHq6N5GBXQ3P33tm
zA6eAhu9Pi0ysPzE39pIC3ZwelnCEpBi4s7rvr36u9ghhD7/7dxaJrZjM5N8
6M0Of5++zTjrycR8j4vXBIWxg6h9OosjholfH1aw1o5lB+Ffj5vfpjGxUf2v
owUX2SF6jlva9BUTzzE9Mr2us4OinvnrmU4mfkR//1itgB0uh8zZ/xxnYs1z
BSPZL9nB7fS6wvfiBJZ2ct6VOcIOkTPNciLOBK54ZW5OnWWHkzz54u/9COyu
s3ZTyRI7uDzzcPvKJPB9Ti6lt2IckLTu4d6hSwR2CPkh4qjIAbX/Dpj03ibw
3OdPHN81OODsC7VfGsUEhscPRueNOeCxaRhxs5bAw0qZX05acMCPZ7VF5PMV
n0068V5kFwesyf0cZf2JwHq/A6uvuXBACe1NmlgfgT+67yuleXOAAcGoUx8j
cEyTacGTUA44fab+06lpAqts1rmKYjhg4EzI5XXzBK7LlU59d4oDgh1FWjWX
CRwgwn5s3wUOuFCs6xbAwcKiMRPhA1c54MARQ8VFHhZ+NtzpFZLPAfdskkdb
BVjYZfer/X8fcoC9vGfhbyEWZqu6Z3u6nOxfa8rqiCgL39HKMJF4wwE3uLc9
UxJnYduM+HXZLRzwdtB7iCLBwtNs/lTtzxxAXbZsCSXjy4GOMmWDHMBVWh0m
QMbGn0wEtv3kAP0H11p+iLHw921ay+8Xyf7KkqaVyP4TH0pMO3Nxwtsr2n1X
yPG1FVb6h4U5QbhE8MlBcn4fEkc7w+U4oTAxNzaQnH/0bNvbFTVOOKm160A9
OwsruFZWJK/hhOEQd7+gJQK/aigoljbkhAU57jbXOQJ7bUi7nbONE+TfO1de
+0lggduxl9bYc4Lhr8PO1FEClwj6nC7fzwmjwXzfFnoJ7MTcxbI4zAnZ+pJx
cl0E/jNgHNQWxAmt5RtiEpsJfGunhrsrkxNUDy1Jw2sCj2v83R6dygmp50V2
XC0i8Pm0oc0cmZxAV3mfYHyLwAYrLdrncjjB45TYZXo6geM788TulHFC/7rd
T/+LJjDV9DyXfg0n1OZGnn7vQ+DGImK+sokcb8K9YmEfgSUT7L919nGC4IYy
7q0bCfzi5+YPHpOcYO2Yx7OfSmBXF7XXU3OcwKC5mNSKEbhQf+EutyAXrLtI
uKSR9W/Sdztyw0YuCNi3nCF5iYkH7VJ8qoELPjsciXoby8RJz6Odd9hyweqd
UbJtR5i447wteLlzQeSz01Zj+kzsZ/J7VUYyF7z/O1FoVM/AZ+RlkwIucUGS
1lXlW0UMfHfOiMfsJhe4vqW4RV9k4NHiY2w/H3FB56zTJ8YBBvZdLfjbqpsL
UnabMvr6o7Evm1rPEo0bOgfh2vSXKHzm63aX9nXcsBKwWaLseRS++9z3U6Ex
N/CGzmr8uRSFR0OL2/bu5IZ/LMapRdso7NNnWF8SzQ0VhX0Jv59EYu8ah5Ij
b7hh85XC9IeBETjxZoSucQs3NN7c8Oy+aQS+w7p8T6ybG9J78g6tl47Aw/pf
86omuSE3v+TAWGU49sr1yZKV5IH1bKwIIb5wfCQh7kSTJw+0bO3Ro58JxZ4W
RY4GbLyw4M/GUxzvj21Cuix6BXjBN2tQ8RSvP9bP5DBMluIFrelYsdxzfphj
fL/Sdzov9KnM8VZf9cW5qdzDZ5144eStxsDBe954sMOVMXCPF+h26iFtDzyx
92Gxq2lOfNB34MRSR7Ej9jsW3Tt9jx/06FfYfVptUZPcZ5fhUn7QuJNa+a59
B1rzZOunL1X8oJrjmsHo3Il+DXG11rXxw5Gy6GDDiV0ozja95voffgjv3n/4
/bATuiRdkm9lIwBXso92LtUcIq+DYwG3xgTgULHj6Uvh3kjNYsdoxn8CwLrB
2XN8xBsl9pYcObssAN/6GUZ9Lj7IVpx5KFpsFZz686pm3MwXfWTw7LQzXAWu
N/1XfeH3RxNmavoLZ1aBEt8r3MQMQtLdBxd2agqCc4CXz4HBMOSpY7JDQl8Q
RkLTT4eKh6OH8atzPhoLwucvf1YUIBxZafTbHtopCL+Dy59qXyXvIxE+2f7R
grBXb5QiZh2BeoTCLU7VCsK15E3nJC5GIrrHnmtW7wXhW0iM/VxZJGKUGkyv
+iQIWpMttw/1RCJRl/mstAlB0LQLC3umRfrxbuxUtrgQjIvRvZnlUeiO2elL
5e5CQHlyeS7hdTSazfAdO+ovBF+VclXt+qMRGrM2MY0UAoZN+N9kNgb6dF5w
tP60ENgwW4cCjRlI4NtF485iIcjXdnpcfI+B9upFXMh8LgQh/Ku3qbxhoNyT
jkMuNUIg5eRtyNXLQFvoMuf7O4Xg0ep30ypiTBTMuN7/c0kIskTSjt4IZqLy
xqObnvAIg2PHtFRaAhPxKrulRIsKg4Dy7uxfWUx0q5aycVlNGL4uTCezv2ai
SRnOs690hUErKmfh3kcmMgwY7D25SRjyl7cFvxpjojaxgiQBW2EIFhEs1hUm
kLLXmZ5mR2E4M7EuO2E1gQKe+62/6CoMtETb4e16BOJy0/kmEy4MsYuXx7kd
CLTrsZD+lxhh4NqbN87pRqCb3D8Tb54i3+91r/MPItCmokd66lnCwLeAKsPO
EMjO7tqfl7nCMDPW1K94mUDukwm1jsXC8DrpzxXJXAJFpQSfm3wuDPtOdh3f
/5BAyTr79ye8FgbFADebUdITN5tMVRXfC8MuuaO3XpPeeBKoPfnkkzCU9wtu
Hm8h0NeilfiBKXL8sTIJ2X4CzdiNWscsCMPLvU6flMcJxDPVKiHBKQKrKgN7
Q0hPyqdWfLsnJAINYcW/BUhPrtXNLzCTFYHKV3WTP0lPmjefC/usKgJ/9dyu
KXOy0P4gpnG4rgg03Vn97TIvCwUJeXILbBaBC54P0/avYqETD2xbbpuJQMbX
p7cPC5Oe3LEhy3CHCHw8+uVXGenJoinlw637RKBkQ2OME+nBV6l8un6eIhA0
qau9hfRip+7sHFuQCDxvK10KIOPx5i+vMhki8CNV5Ocg2X4l6E2y3gkR2Gk6
w11A+lFC+KHj2xQREIwUsXlM+lGzOFPZ/YoIGHRQGnhIz261PzE6f1sEYj/2
ZeSRftz9I+Dx+SIRmNEXeHuW9KP3OadYWpkIpJnsjX1J+jFmDbLA1SLwlnK8
YyPpxwvvNUX3NYlA94T5/J9fBMoLFv/846MIHDp5QJT/B4FeCC/lJvaJwLmI
CAePYQK9Lx4KUp4UgTeXzaY4ewg0YN+y6dmcCCzcCKXMdBAolvGVrYBNFKyj
snW03hEo0bJ1aJZbFBpP+ewpekWOJ1PXaLJKFPw6nHpZTwl0daT8YbKoKFBX
xpQzCgmUX/bw0kcpUWCJXfL6e51A5fuyXINVRMEy9Vzwg+MEqqWd21auLgpb
Vx2cXgwnUMv8CU0ebVEYczVYSD9MoMErgbM3NojCJu8v9o/NCCT0CSU224jC
uo+75fMXmEj2rkGAnIMoVI2HF/kPMpEqU8vBy0kUQk57FR1vYaKNshLyy26i
YOEhv/1OLhO57x9+oBMlCrKxuiJftjGRv+aXNCZLFK6tfaS2lc5EUQstjNp4
UeAZKsW/RZgoOfOF6cFkUWDsEYgM6magJ59SOs9mi8LjbFvZlCMM9Of7jX+x
eaKwvvrB+yZLBjIbK9YKLhQFB5dVbvF0Bmpb/HDU4YkoRMi/+brlRzSalpfS
kKoXhQML8Y90Q6LRmkM3om/+EIV2dq2qS/uiULRX8a3z/5HzHTy23l4/ClUG
4cZjC6Lw8ZPdlkTBKGQX16d8mEMMjgaK34nCkSggW72eJi0GM+pxnQGrI9Hd
vgcyj7aKgYuBxtbzb8PR9FiVaY6ZGLA2KmbmXQtHm2ZbAtItxWC9wkNHq+Bw
VMcxi6N2iUH92c3WiHx+D6lt9DXyEgPvC6niAk5hSNW76vnrFDEQtTlzQONc
CLox/v7Axy9icHLz190Djb7ISu5I1bo+MRDYFzCUv9MX/bJcVE0dFoPj8tlC
5e0+yC5fbXLbjBiYb5rhHer2RktuzLhHPOKwyD7Nf7fnCHLupOSmrBOHyZ75
d5zN7kj6VeSk2WlxYArNutU9cEDnMuTjH+pLwLoz//b4Se7Ga2//aJnZJAFJ
R04WWaruwR+KalQMtkrAV7PS57fXOmKxWv+a55YSoDDu9PG+1V58abacu+ag
BJxyNArcEeGMs3a6pHQkSoD2VqtstNsD5/Ffz1r8LAGj8ZHe71T9sLlU6Ljx
dwlQ1xoovXbVDw+pmBvHDUnAba/MP+Vi/lhj8+RXjmkJsPVVSOte9seF3ltU
BLklYVNlt7hJcyAufv31jvJaSfB1WWUxrxqKXxxVKt12UhLMD8P8hu0R+HK1
kI32GUnYd/NHuGhoBI7kXukVT5WE6blT/NFXI7Beas+q/suS0B2671zPVAS+
ez378LF7klDIZvSa/3wkTvx+ftHnoSSMj7W3UJ5F4iPUY+d3lkpCg2mwfeXX
SKxS5F6hXCUJxnx9nDGaUTizgiJR2SoJ6vq38hdeROHof2KFeR8lwfJl3UmJ
b1HYcRsHSvkiCWwresP3/kVh0Xf9/i5DkjCy0PrHdls0PvM5t2ZxQRKqTY74
mNZGY+aievhGFSmgMCL79pD3w71bpfmU1aWggl82+GsdAxsc57nJTZeC+4WJ
y53fGXiab6ShY70U6M3tLJOTYGJf2buUCEspOLBZeG97KBNbHMwsc7aTgogC
2dvtiUxMvXVmh9kuKXAJjg2E60z8neZHiLlIAaeMb8KhN0y8fxO99WGwFHiI
v4/NFCXwxhh5nysRUuArEB79k0Lep7HAchxTChiKebYP9Qn8wWJC0/6EFFiK
H1j02U3g4uQvVRtOS0FtrYyEuweBU96/c1RKIfu/9z0ZhxDYam/RsckMKeg8
62/yJJnAGlevS3dclYI6EelPFlcIzNWTUlSRLQW/cvPOQi6B+ylHzXLzyP3A
YmK3SB++8gr6lFwoBc1CC2peLwh8s/BQcHixFJwWSj95nvRE7NQOLucnUhCa
9mpWmfTGpqg1elqVUqDwNE4psIfArN4ctpgaKTCQCJ1qGCbwS2uZ1qZ6KXjA
aXks9AeBV56cva3cLAUjZQPZbr9JjyqzhYe2SUHR2s0KV/4S+MSZSLOaLilA
l6zrpEk/1c6Oikt+k4KjIetYPdwszHPo0IBXvxRIYGWpH/wsbFXf+qRsRAoe
DexlbSd9lrzOIoF/SgocAjemDYqwcNO1ckeXWSnwq1xn8470nTDPWvUH81Kg
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
GVqRQj5oqhSENxwyuvd/clTE/A==
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
Df//v9R/AXYdaig=
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, DisplayFunction :> 
     Identity, Frame -> {{True, False}, {True, False}}, FrameLabel -> {{
        FormBox["\"rotation axis component\"", TraditionalForm], None}, {
        FormBox[
        "\"evolution start \\!\\(\\*SubscriptBox[\\(t\\), \\(0\\)]\\)\"", 
         TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {{0}, {0}}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, 
     PlotRange -> {{0, 15.707963267948966`}, {-0.006366197708924445, 
       0.006366197723674506}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{0, 0}, {0.05, 0.05}}, 
     Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"\\!\\(\\*SubscriptBox[\\(\[Sigma]\\), \\(x\\)]\\)\"", 
       "\"\\!\\(\\*SubscriptBox[\\(\[Sigma]\\), \\(y\\)]\\)\""}, "LineLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.721650464193869*^9, {3.721650501492667*^9, 3.7216505182023697`*^9}, 
   3.7216505628715897`*^9, 3.7216507004082108`*^9, 3.721650745017036*^9, {
   3.721650994124024*^9, 3.721651001871189*^9}, {3.72165105618231*^9, 
   3.7216510766053877`*^9}, 3.721651107192515*^9, {3.721651229482723*^9, 
   3.721651247705823*^9}, {3.721651279774783*^9, 3.721651286963192*^9}, {
   3.721651385267426*^9, 3.72165138975963*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1690, 919},
WindowMargins->{{Automatic, 1806}, {-61, Automatic}},
CellContext->Notebook,
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 9, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 159, 2, 66, "Text"],
Cell[CellGroupData[{
Cell[742, 26, 137, 1, 64, "Section"],
Cell[882, 29, 244, 6, 49, "Text"],
Cell[1129, 37, 894, 25, 28, "Input"],
Cell[2026, 64, 169, 2, 30, "Text"],
Cell[2198, 68, 4883, 130, 170, "Input"],
Cell[CellGroupData[{
Cell[7106, 202, 1784, 49, 136, "Input"],
Cell[8893, 253, 115, 3, 47, "Output"],
Cell[9011, 258, 562, 17, 52, "Output"],
Cell[9576, 277, 1067, 32, 53, "Output"],
Cell[10646, 311, 779, 24, 52, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11474, 341, 270, 3, 64, "Section"],
Cell[11747, 346, 181, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[11953, 354, 10697, 260, 648, "Input"],
Cell[22653, 616, 170, 3, 40, "Output"],
Cell[22826, 621, 332, 7, 243, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23207, 634, 186, 2, 64, "Section"],
Cell[23396, 638, 3904, 97, 199, "Input"],
Cell[27303, 737, 10988, 246, 743, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38328, 988, 134, 1, 64, "Section"],
Cell[38465, 991, 1815, 45, 63, "Input"],
Cell[40283, 1038, 512, 16, 28, "Input"],
Cell[40798, 1056, 4182, 100, 165, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45017, 1161, 111, 1, 64, "Section"],
Cell[45131, 1164, 12125, 302, 1015, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57293, 1471, 100, 1, 65, "Chapter"],
Cell[CellGroupData[{
Cell[57418, 1476, 97, 1, 64, "Section"],
Cell[57518, 1479, 14264, 267, 522, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71819, 1751, 163, 2, 64, "Section"],
Cell[71985, 1755, 8437, 189, 454, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80459, 1949, 99, 1, 64, "Section"],
Cell[80561, 1952, 9425, 195, 420, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90023, 2152, 174, 2, 64, "Section"],
Cell[90200, 2156, 27188, 580, 1281, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117425, 2741, 102, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[117552, 2746, 1124, 21, 97, "Input"],
Cell[118679, 2769, 97296, 1754, 827, "Output"]
}, Open  ]],
Cell[215990, 4526, 68, 1, 28, "Input"],
Cell[216061, 4529, 68, 1, 28, "Input"],
Cell[216132, 4532, 1965, 58, 131, "Input"],
Cell[CellGroupData[{
Cell[218122, 4594, 124, 2, 28, "Input"],
Cell[218249, 4598, 1284, 36, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219570, 4639, 514, 14, 28, "Input"],
Cell[220087, 4655, 496, 11, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220620, 4671, 1732, 45, 56, "Input"],
Cell[222355, 4718, 61279, 1054, 247, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
